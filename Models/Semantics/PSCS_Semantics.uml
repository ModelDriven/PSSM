<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xmi:id="_rP7eQNyJEeGru4CffneBug" name="PSCS_Semantics">
  <packagedElement xmi:type="uml:Package" xmi:id="_W_JVwNzCEeGru4CffneBug" name="Semantics">
    <packagedElement xmi:type="uml:Package" xmi:id="_RDIo4N-4EeGnO-TF_1T_iQ" name="Actions">
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwMCN2JEeGnO-TF_1T_iQ" name="CS_AddStructuralFeatureValueActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMCd2JEeGnO-TF_1T_iQ">
          <body>The behavior of fUML AddStructuralFeatureActionActivation::doAction() is overriden. In the case where the targeted structural feature is a port and the value to be added is a Reference, an interaction point is created on the basis of the given Reference. It then behaves like in fUML, except that the execution continues using the created interaction point instead of the given Reference.</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_hMIDUOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_InteractionPoint;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Link;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.Property;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.Port;&#xD;
import fUML.Semantics.Actions.IntermediateActions.AddStructuralFeatureValueActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValue;&#xD;
import fUML.Semantics.Classes.Kernel.Link;&#xD;
import fUML.Semantics.Classes.Kernel.LinkList;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.Classes.Kernel.StructuredValue;&#xD;
import fUML.Semantics.Classes.Kernel.UnlimitedNaturalValue;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Semantics.Loci.LociL1.ChoiceStrategy;&#xD;
import fUML.Syntax.Actions.IntermediateActions.AddStructuralFeatureValueAction;&#xD;
import fUML.Syntax.Classes.Kernel.Association;&#xD;
import fUML.Syntax.Classes.Kernel.StructuralFeature;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwMEt2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-IntermediateActions-AddStructuralFeatureValueActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwME92JEeGnO-TF_1T_iQ" name="doAction" specification="_wUwMFN2JEeGnO-TF_1T_iQ">
          <language>Java</language>
          <body>		// If the feature is a port and the input value to be added is a&#xD;
		// Reference,&#xD;
		// Replaces this Reference by an InteractionPoint, and then behaves&#xD;
		// as usual.&#xD;
		// If the feature is not a port, behaves as usual&#xD;
&#xD;
		AddStructuralFeatureValueAction action = (AddStructuralFeatureValueAction) (this.node);&#xD;
		StructuralFeature feature = action.structuralFeature;&#xD;
&#xD;
		if (!(feature instanceof Port)) {&#xD;
			// Behaves as usual&#xD;
			this.doActionDefault() ;&#xD;
		} &#xD;
		else {&#xD;
			ValueList inputValues = this.takeTokens(action.value);&#xD;
			// NOTE: Multiplicity of the value input pin is required to be 1..1.&#xD;
			Value inputValue = inputValues.getValue(0);&#xD;
			if (inputValue instanceof Reference) {&#xD;
				// First constructs an InteractionPoint from the inputValue&#xD;
				Reference reference = (Reference) inputValue;&#xD;
				CS_InteractionPoint interactionPoint = new CS_InteractionPoint();&#xD;
				interactionPoint.referent = reference.referent;&#xD;
				interactionPoint.definingPort = (Port) feature;&#xD;
				// The value on action.object is necessarily instanceof&#xD;
				// ReferenceToCompositeStructure (otherwise, the feature cannot&#xD;
				// be a port)&#xD;
				CS_Reference owner = (CS_Reference) this.takeTokens(&#xD;
						action.object).getValue(0);&#xD;
				interactionPoint.owner = owner;&#xD;
				// Then replaces the Reference by an InteractionPoint&#xD;
				// in the inputValues&#xD;
				inputValues.remove(0);&#xD;
				inputValues.addValue(0, interactionPoint);&#xD;
				// Finally concludes with usual fUML behavior of&#xD;
				// AddStructuralFeatureValueAction (i.e., the usual behavior&#xD;
				// when&#xD;
				// the value on action.object pin is a StructuredValue)&#xD;
				Integer insertAt = 0;&#xD;
				if (action.insertAt != null) {&#xD;
					insertAt = ((UnlimitedNaturalValue) this.takeTokens(&#xD;
							action.insertAt).getValue(0)).value.naturalValue;&#xD;
				}&#xD;
				if (action.isReplaceAll) {&#xD;
					owner.setFeatureValue(feature, inputValues, 0);&#xD;
				} &#xD;
				else {&#xD;
					FeatureValue featureValue = owner.getFeatureValue(feature);&#xD;
&#xD;
					if (featureValue.values.size() > 0 &amp; insertAt == 0) {&#xD;
						// If there is no insertAt pin, then the structural&#xD;
						// feature must&#xD;
						// be unordered, and the insertion position is&#xD;
						// immaterial.&#xD;
						insertAt = ((ChoiceStrategy) this.getExecutionLocus().factory&#xD;
								.getStrategy(&quot;choice&quot;))&#xD;
								.choose(featureValue.values.size());&#xD;
					}&#xD;
					if (feature.multiplicityElement.isUnique) {&#xD;
						// Remove any existing value that duplicates the input&#xD;
						// value&#xD;
						Integer j = position(interactionPoint, featureValue.values, 1);&#xD;
						if (j > 0) {&#xD;
							featureValue.values.remove(j - 1);&#xD;
							if (insertAt > 0 &amp; j &lt; insertAt) {&#xD;
								insertAt = insertAt - 1;&#xD;
							}&#xD;
						}&#xD;
					}&#xD;
&#xD;
					if (insertAt &lt;= 0) {&#xD;
						// Note: insertAt = -1 indicates an unlimited value of&#xD;
						// &quot;*&quot;&#xD;
						featureValue.values.addValue(interactionPoint);&#xD;
					} else {&#xD;
						featureValue.values.addValue(insertAt - 1, interactionPoint);&#xD;
					}&#xD;
				}&#xD;
				if (action.result != null) {&#xD;
					this.putToken(action.result, owner);&#xD;
				}&#xD;
			} &#xD;
			else {&#xD;
				// behaves as usual&#xD;
				this.doActionDefault() ;&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_AlLQQOYcEeGYZqnbU6eCYw" name="doActionDefault" specification="_7f6moOYbEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Get the values of the object and value input pins.&#xD;
		// If the given feature is an association end, then create a link&#xD;
		// between the object and value inputs.&#xD;
		// Otherwise, if the object input is a structural value, then add a&#xD;
		// value to the values for the feature.&#xD;
		// If isReplaceAll is true, first remove all current matching links or&#xD;
		// feature values.&#xD;
		// If isReplaceAll is false and there is an insertAt pin, insert the&#xD;
		// value at the appropriate position.&#xD;
		// This operation captures same semantics as fUML &#xD;
		// AddStructuralFeatureValueActionActivation.doAction(), except that&#xD;
		// when the feature is an association end, a CS_Link will be created instead&#xD;
		// of a Link&#xD;
&#xD;
		AddStructuralFeatureValueAction action = (AddStructuralFeatureValueAction) (this.node);&#xD;
		StructuralFeature feature = action.structuralFeature;&#xD;
		Association association = this.getAssociation(feature);&#xD;
&#xD;
		Value value = this.takeTokens(action.object).getValue(0);&#xD;
		ValueList inputValues = this.takeTokens(action.value);&#xD;
&#xD;
		// NOTE: Multiplicity of the value input pin is required to be 1..1.&#xD;
		Value inputValue = inputValues.getValue(0);&#xD;
&#xD;
		int insertAt = 0;&#xD;
		if (action.insertAt != null) {&#xD;
			insertAt = ((UnlimitedNaturalValue) this&#xD;
					.takeTokens(action.insertAt).getValue(0)).value.naturalValue;&#xD;
		}&#xD;
&#xD;
		if (association != null) {&#xD;
			LinkList links = this.getMatchingLinks(association, feature, value);&#xD;
&#xD;
			Property oppositeEnd = this.getOppositeEnd(association, feature);&#xD;
			int position = 0;&#xD;
			if (oppositeEnd.multiplicityElement.isOrdered) {&#xD;
				position = -1;&#xD;
			}&#xD;
&#xD;
			if (action.isReplaceAll) {&#xD;
				for (int i = 0; i &lt; links.size(); i++) {&#xD;
					Link link = links.getValue(i);&#xD;
					link.destroy();&#xD;
				}&#xD;
			} else if (feature.multiplicityElement.isUnique) {&#xD;
				for (int i = 0; i &lt; links.size(); i++) {&#xD;
					Link link = links.getValue(i);&#xD;
					FeatureValue featureValue = link.getFeatureValue(feature);&#xD;
					if (featureValue.values.getValue(0).equals(inputValue)) {&#xD;
						position = link.getFeatureValue(oppositeEnd).position;&#xD;
						if (insertAt > 0 &amp; featureValue.position &lt; insertAt) {&#xD;
							insertAt = insertAt - 1;&#xD;
						}&#xD;
						link.destroy();&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
&#xD;
			CS_Link newLink = new CS_Link();&#xD;
			newLink.type = association;&#xD;
&#xD;
			// This necessary when setting a feature value with an insertAt&#xD;
			// position&#xD;
			newLink.locus = this.getExecutionLocus();&#xD;
&#xD;
			newLink.setFeatureValue(feature, inputValues, insertAt);&#xD;
&#xD;
			ValueList oppositeValues = new ValueList();&#xD;
			oppositeValues.addValue(value);&#xD;
			newLink.setFeatureValue(oppositeEnd, oppositeValues, position);&#xD;
&#xD;
			newLink.locus.add(newLink);&#xD;
&#xD;
		} else if (value instanceof StructuredValue) {&#xD;
			StructuredValue structuredValue = (StructuredValue) value;&#xD;
&#xD;
			if (action.isReplaceAll) {&#xD;
				structuredValue.setFeatureValue(feature, inputValues, 0);&#xD;
			} else {&#xD;
				FeatureValue featureValue = structuredValue&#xD;
						.getFeatureValue(feature);&#xD;
&#xD;
				if (featureValue.values.size() > 0 &amp; insertAt == 0) {&#xD;
					// *** If there is no insertAt pin, then the structural&#xD;
					// feature must be unordered, and the insertion position is&#xD;
					// immaterial. ***&#xD;
					insertAt = ((ChoiceStrategy) this.getExecutionLocus().factory&#xD;
							.getStrategy(&quot;choice&quot;)).choose(featureValue.values&#xD;
									.size());&#xD;
				}&#xD;
&#xD;
				if (feature.multiplicityElement.isUnique) {&#xD;
					// Remove any existing value that duplicates the input value&#xD;
					int j = position(inputValue, featureValue.values, 1);&#xD;
					if (j > 0) {&#xD;
						featureValue.values.remove(j - 1);&#xD;
						if (insertAt > 0 &amp; j &lt; insertAt) {&#xD;
							insertAt = insertAt - 1;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
&#xD;
				if (insertAt &lt;= 0) { // Note: insertAt = -1 indicates an&#xD;
					// unlimited value of &quot;*&quot;&#xD;
					featureValue.values.addValue(inputValue);&#xD;
				} else {&#xD;
					featureValue.values.addValue(insertAt - 1, inputValue);&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
&#xD;
		if (action.result != null) {&#xD;
			this.putToken(action.result, value);&#xD;
		}</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwMFN2JEeGnO-TF_1T_iQ" name="doAction" visibility="public" method="_wUwME92JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMFd2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public doAction () { &#xD;
	// If the feature is a port and the input value to be added is a Reference,&#xD;
	// Replaces this Reference by an InteractionPoint, and then behaves &#xD;
	// as usual.&#xD;
	// If the feature is not a port, behaves as usual&#xD;
&#xD;
	AddStructuralFeatureValueAction action = &#xD;
							(AddStructuralFeatureValueAction)(this.node);&#xD;
	StructuralFeature feature = action.structuralFeature;&#xD;
&#xD;
	if (! (feature instanceof Port)) {&#xD;
		// Behaves as usual&#xD;
		super.doAction() ;&#xD;
	}&#xD;
	else {&#xD;
		ValueList inputValues = this.takeTokens(action.value);&#xD;
		// NOTE: Multiplicity of the value input pin is required to be 1..1.&#xD;
		Value inputValue = inputValues.getValue(0);&#xD;
		if (inputValue instanceof Reference) {&#xD;
			// First constructs an InteractionPoint from the inputValue&#xD;
			Reference reference = (Reference)inputValue ;&#xD;
			InteractionPoint interactionPoint = new InteractionPoint() ;&#xD;
			interactionPoint.referent = reference.referent ;&#xD;
			interactionPoint.definingPort = (Port)feature ;&#xD;
			// The value on action.object is necessarily instanceof &#xD;
			// ReferenceToCompositeStructure (otherwise, the feature cannot &#xD;
			// be a port)&#xD;
			ReferenceToCompositeStructure owner = &#xD;
									(ReferenceToCompositeStructure)this&#xD;
													.takeTokens(action.object).getValue(0);&#xD;
			interactionPoint.owner = owner ;&#xD;
			// Then replaces the Reference by an InteractionPoint &#xD;
			// in the inputValues&#xD;
			inputValues.remove(0) ;&#xD;
			inputValues.addValue(0,interactionPoint) ;&#xD;
			// Finally concludes with usual fUML behavior of &#xD;
			// AddStructuralFeatureValueAction (i.e., the usual behavior when &#xD;
			// the value on action.object pin is a StructuredValue)&#xD;
			Integer insertAt = 0;&#xD;
			if (action.insertAt != null) {&#xD;
	    		insertAt = ((UnlimitedNaturalValue)this&#xD;
												.takeTokens(action.insertAt).getValue(0))&#xD;
												.value.naturalValue;&#xD;
			}&#xD;
			if (action.isReplaceAll) {&#xD;
	        	owner.setFeatureValue(feature, inputValues, 0);&#xD;
	    	} else {&#xD;
	        	FeatureValue featureValue = owner.getFeatureValue(feature);&#xD;
	&#xD;
		        if (featureValue.values.size() > 0 &amp; insertAt == 0 ) {&#xD;
		            // If there is no insertAt pin, then the structural feature must &#xD;
					// be unordered, and the insertion position is immaterial.&#xD;
	    	        insertAt = ((ChoiceStrategy)this.getExecutionLocus()&#xD;
												.factory.getStrategy(&quot;choice&quot;))&#xD;
												.choose(featureValue.values.size());&#xD;
	        	}&#xD;
	        	if (feature.multiplicityElement.'isUnique') {&#xD;
	            	// Remove any existing value that duplicates the input value&#xD;
		            Integer j = position(inputValue, featureValue.values, 1);&#xD;
		            if (j > 0) {&#xD;
	    	            featureValue.values.remove(j-1);&#xD;
	        	        if (insertAt > 0 &amp; j &lt; insertAt) {&#xD;
	            	        insertAt = insertAt - 1;&#xD;
	                	}&#xD;
		            }&#xD;
		        }&#xD;
	&#xD;
	    	    if (insertAt &lt;= 0) {  &#xD;
					// Note: insertAt = -1 indicates an unlimited value of &quot;*&quot;&#xD;
	        	    featureValue.values.addValue(inputValue);&#xD;
		        } else {&#xD;
		            featureValue.values.addValue(insertAt - 1, inputValue);&#xD;
	    	    }&#xD;
		    }&#xD;
		}&#xD;
		else {&#xD;
			// behaves as usual&#xD;
			super.doAction();&#xD;
		}&#xD;
	}	&#xD;
} </body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_7f6moOYbEeGYZqnbU6eCYw" name="doActionDefault" method="_AlLQQOYcEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_xBSTUOYVEeGYZqnbU6eCYw" name="CS_CreateObjectActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_UrRfAOYgEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Semantics.Actions.IntermediateActions.CreateObjectActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Syntax.Actions.IntermediateActions.CreateObjectAction;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_SKurMOecEeGYZqnbU6eCYw">
          <body>Extends fUML semantics in the sense that the reference placed on the result pin is a CS_Reference (in the case where the instantiated object is a CS_Object) not a Reference. [Note: this extension can be avoided if fUML introduces a factory for Reference]</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_4vXZUOYVEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-IntermediateActions-CreateObjectActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BEtToOYWEeGYZqnbU6eCYw" name="doAction" specification="_8AcIgOYVEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Create an object with the given classifier (which must be a class) as&#xD;
		// its type, at the same locus as the action activation.&#xD;
		// Place a reference to the object on the result pin of the action.&#xD;
		// Extends fUML semantics in the sense that the reference placed&#xD;
		// on the result pin is a CS_Reference (in the case where the instantiated object&#xD;
		// is a CS_Object) not a Reference&#xD;
		// Note that Locus.instantiate(Class) is extended in this specification&#xD;
		// to produce a CS_Object instead of an Object in the case where the class&#xD;
		// to be instantiated is not a behavior&#xD;
&#xD;
		CreateObjectAction action = (CreateObjectAction) (this.node);&#xD;
&#xD;
		Reference reference ;&#xD;
		Object_ referent =  this.getExecutionLocus().instantiate((Class_) (action.classifier));&#xD;
		if (referent instanceof CS_Object) {&#xD;
			reference = new CS_Reference() ;&#xD;
			((CS_Reference)reference).compositeReferent = (CS_Object)referent ;&#xD;
		}&#xD;
		else {&#xD;
			reference = new Reference() ;&#xD;
		}&#xD;
		reference.referent = referent ;&#xD;
&#xD;
		this.putToken(action.result, reference);</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8AcIgOYVEeGYZqnbU6eCYw" name="doAction" method="_BEtToOYWEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_eItOUOYWEeGYZqnbU6eCYw" name="CS_ReadSelfActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_kiPXsOYgEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import fUML.Semantics.Actions.IntermediateActions.ReadSelfActionActivation;&#xD;
import fUML.Syntax.Actions.BasicActions.OutputPin;&#xD;
import fUML.Syntax.Actions.IntermediateActions.ReadSelfAction;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_hG1eIOecEeGYZqnbU6eCYw">
          <body>Extends fUML semantics in the sense that the reference placed on the result pin is a CS_Reference, not a Reference. [Note: this extension can be avoided if fUML introduces a factory for instantiating Reference]</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_mf_pYOYWEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-IntermediateActions-ReadSelfActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vxuTcOYWEeGYZqnbU6eCYw" name="doAction" specification="_n7xq4OYWEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Get the context object of the activity execution containing this&#xD;
		// action activation and place a reference to it on the result output&#xD;
		// pin.&#xD;
		// Extends fUML semantics in the sense that the reference placed on&#xD;
		// the result pin is a CS_Reference, not a Reference&#xD;
&#xD;
		// Debug.println(&quot;[ReadSelfActionActivation] Start...&quot;);&#xD;
&#xD;
		CS_Reference context = new CS_Reference();&#xD;
		context.referent = this.getExecutionContext();&#xD;
		if (context.referent instanceof CS_Object) {// i.e. alternatively, it can be an execution&#xD;
			context.compositeReferent = (CS_Object)context.referent ;&#xD;
		}&#xD;
&#xD;
		// Debug.println(&quot;[ReadSelfActionActivation] context object = &quot; +&#xD;
		// context.referent);&#xD;
&#xD;
		OutputPin resultPin = ((ReadSelfAction) (this.node)).result;&#xD;
		this.putToken(resultPin, context);&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_n7xq4OYWEeGYZqnbU6eCYw" name="doAction" method="_vxuTcOYWEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_v_yAwOYaEeGYZqnbU6eCYw" name="CS_CreateLinkActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_DplfoOYgEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Link;&#xD;
import fUML.Semantics.Actions.IntermediateActions.CreateLinkActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.ExtensionalValue;&#xD;
import fUML.Semantics.Classes.Kernel.ExtensionalValueList;&#xD;
import fUML.Semantics.Classes.Kernel.Link;&#xD;
import fUML.Semantics.Classes.Kernel.UnlimitedNaturalValue;&#xD;
import fUML.Syntax.Actions.IntermediateActions.CreateLinkAction;&#xD;
import fUML.Syntax.Actions.IntermediateActions.LinkEndCreationData;&#xD;
import fUML.Syntax.Actions.IntermediateActions.LinkEndCreationDataList;&#xD;
import fUML.Syntax.Classes.Kernel.Association;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_uU2XkOecEeGYZqnbU6eCYw">
          <body>fUML semantics is extended in the sense that a CS_Link is created instead of a Link. [Note: This extension can be avoided if fUML introduces a factory for Link]</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_4HvmYOYaEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-IntermediateActions-CreateLinkActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_EmciwOYbEeGYZqnbU6eCYw" name="doAction" specification="_-lgUAOYaEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Get the extent at the current execution locus of the association for&#xD;
		// which a link is being created.&#xD;
		// Destroy all links that have a value for any end for which&#xD;
		// isReplaceAll is true.&#xD;
		// Create a new link for the association, at the current locus, with the&#xD;
		// given end data values,&#xD;
		// inserted at the given insertAt position (for ordered ends).&#xD;
		// fUML semantics is extended in the sense that a CS_Link is created instead of&#xD;
		// a Link&#xD;
&#xD;
		CreateLinkAction action = (CreateLinkAction) (this.node);&#xD;
		LinkEndCreationDataList endDataList = action.endData;&#xD;
&#xD;
		Association linkAssociation = this.getAssociation();&#xD;
		ExtensionalValueList extent = this.getExecutionLocus().getExtent(&#xD;
				linkAssociation);&#xD;
&#xD;
		Link oldLink = null;&#xD;
		for (int i = 0; i &lt; extent.size(); i++) {&#xD;
			ExtensionalValue value = extent.getValue(i);&#xD;
			Link link = (Link) value;&#xD;
&#xD;
			boolean noMatch = true;&#xD;
			int j = 1;&#xD;
			while (noMatch &amp; j &lt;= endDataList.size()) {&#xD;
				LinkEndCreationData endData = endDataList.getValue(j - 1);&#xD;
				if (endData.isReplaceAll&#xD;
						&amp; this.endMatchesEndData(link, endData)) {&#xD;
					oldLink = link;&#xD;
					link.destroy();&#xD;
					noMatch = false;&#xD;
				}&#xD;
				j = j + 1;&#xD;
			}&#xD;
		}&#xD;
&#xD;
		CS_Link newLink = new CS_Link();&#xD;
		newLink.type = linkAssociation;&#xD;
&#xD;
		// This necessary when setting a feature value with an insertAt position&#xD;
		newLink.locus = this.getExecutionLocus();&#xD;
&#xD;
		for (int i = 0; i &lt; endDataList.size(); i++) {&#xD;
			LinkEndCreationData endData = endDataList.getValue(i);&#xD;
&#xD;
			int insertAt;&#xD;
			if (endData.insertAt == null) {&#xD;
				insertAt = 0;&#xD;
			} else {&#xD;
				insertAt = ((UnlimitedNaturalValue) (this&#xD;
						.takeTokens(endData.insertAt).getValue(0))).value.naturalValue;&#xD;
				if (oldLink != null) {&#xD;
					if (oldLink.getFeatureValue(endData.end).position &lt; insertAt) {&#xD;
						insertAt = insertAt - 1;&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
			newLink.setFeatureValue(endData.end,&#xD;
					this.takeTokens(endData.value), insertAt);&#xD;
		}&#xD;
&#xD;
		this.getExecutionLocus().add(newLink);</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_-lgUAOYaEeGYZqnbU6eCYw" name="doAction" method="_EmciwOYbEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_qh0a8MEeEeKkJbQgitQ3JQ" name="CS_ClearStructuralFeatureActionActivation">
        <generalization xmi:type="uml:Generalization" xmi:id="_t_8HoMEeEeKkJbQgitQ3JQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-IntermediateActions-ClearStructuralFeatureActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2YtwcsEeEeKkJbQgitQ3JQ" name="doAction" specification="_2YtwcMEeEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// Get the value of the object input pin.&#xD;
		// If the given feature is an association end, then&#xD;
		// destroy all links that have the object input on the opposite end.&#xD;
		// Otherwise, if the object input is a structured value, then&#xD;
		// set the appropriate feature of the input value to be empty.&#xD;
		ClearStructuralFeatureAction action = (ClearStructuralFeatureAction)(this.node);&#xD;
		StructuralFeature feature = action.structuralFeature;&#xD;
		Association association = this.getAssociation(feature);&#xD;
		Value value = this.takeTokens(action.object).get(0);&#xD;
		if(association != null) {&#xD;
			LinkList links = this.getMatchingLinks(association, feature, value);&#xD;
			for(int i = 0; i &lt; links.size(); i++) {&#xD;
				Link link = links.get(i);&#xD;
				link.destroy();&#xD;
			}&#xD;
		} else if(value instanceof StructuredValue) {&#xD;
			// If the value is a data value, then it must be copied before&#xD;
			// any change is made.&#xD;
			if(!(value instanceof Reference)) {&#xD;
				value = value.copy();&#xD;
			}&#xD;
			else {&#xD;
				// extension to fUML&#xD;
				CS_LinkList linksToDestroy = this.getLinksToDestroy((StructuredValue)value, feature) ;&#xD;
				for (int i = 0 ; i &lt; linksToDestroy.size() ; i++) {&#xD;
					linksToDestroy.get(i).destroy() ;&#xD;
				}&#xD;
				//&#xD;
			}&#xD;
			((StructuredValue)value).setFeatureValue(action.structuralFeature, new ValueList(), 0);&#xD;
		}&#xD;
		if(action.result != null) {&#xD;
			this.putToken(action.result, value);&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_v1biQMEhEeKkJbQgitQ3JQ" name="getLinksToDestroy" specification="_Fc2MEMEhEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		CS_LinkList linksToDestroy = new CS_LinkList() ;&#xD;
		if (value instanceof CS_Reference) {&#xD;
			CS_Reference context = (CS_Reference)value ;&#xD;
			// Retrieves the feature values for the structural feature associated with this action,&#xD;
			// in the context of this reference &#xD;
			FeatureValue featureValue = context.getFeatureValue(feature) ;&#xD;
			if (feature instanceof Port) {&#xD;
				// all values are interaction points&#xD;
				// any link targeting this interaction point must be destroyed&#xD;
				for (int i = 0 ; i &lt; featureValue.values.size() ; i++) {&#xD;
					CS_InteractionPoint interactionPoint = (CS_InteractionPoint)featureValue.values.get(i) ;&#xD;
					CS_LinkList connectorInstances = context.compositeReferent.getLinks(interactionPoint) ;&#xD;
					for (int j = 0 ; j &lt; connectorInstances.size() ; j++) {&#xD;
						CS_Link link = connectorInstances.get(j) ;&#xD;
						linksToDestroy.add(link) ;&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
			else { // feature is an attribute&#xD;
				// Retrieve all potential link ends,&#xD;
				// separating potential link ends corresponding to the given feature,&#xD;
				// and potential link ends corresponding to other features.&#xD;
				// By &quot;potential link ends&quot;, we refer to the values of a given feature,&#xD;
				// as well as interaction points associated with this value, if any.&#xD;
				ValueList allValuesForFeature = new ValueList() ;&#xD;
				ValueList allOtherValues = new ValueList() ;&#xD;
				for (int i = 0 ; i &lt; context.referent.featureValues.size() ; i++) {&#xD;
					StructuralFeature currentFeature = context.referent.featureValues.get(i).feature ;&#xD;
					ValueList values = this.getPotentialLinkEnds(context, currentFeature) ;&#xD;
					for (int j = 0 ; j &lt; values.size() ; j++) {&#xD;
						Value v = values.get(j) ;&#xD;
						if (currentFeature != feature) {&#xD;
							allOtherValues.add(v) ;&#xD;
						}&#xD;
						else {&#xD;
							allValuesForFeature.add(v) ;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
				// Retrieves all links available at the locus&#xD;
				ExtensionalValueList extensionalValues = this.getExecutionLocus().extensionalValues ;&#xD;
				CS_LinkList allLinks = new CS_LinkList() ;&#xD;
				for (int i = 0 ; i &lt; extensionalValues.size() ; i ++) {&#xD;
					ExtensionalValue extensionalValue = extensionalValues.get(i) ;&#xD;
					if (extensionalValue instanceof CS_Link) {&#xD;
						allLinks.add((CS_Link)extensionalValue) ;&#xD;
					}&#xD;
				}&#xD;
				// Retrieves links representing connector instances in the context object &#xD;
				for (int i = 0 ; i &lt; allLinks.size() ; i++) {&#xD;
					CS_Link link = allLinks.get(i) ;&#xD;
					boolean linkHasToBeDestroyed = false ;&#xD;
					for (int j = 0 ; j &lt; allValuesForFeature.size() &amp;&amp; !linkHasToBeDestroyed; j++) {&#xD;
						Value v = allValuesForFeature.get(j) ;&#xD;
						StructuralFeature featureForV = link.getFeature(v) ;&#xD;
						if (featureForV != null) {&#xD;
							// Check if feature values of this link for other features&#xD;
							// contains elements identified in allOtherValue&#xD;
							for (int k = 0 ; k &lt; link.featureValues.size() &amp;&amp; !linkHasToBeDestroyed ; k++) {&#xD;
								FeatureValue otherFeatureValue = link.featureValues.get(k) ;&#xD;
								if (otherFeatureValue.feature != featureForV) {&#xD;
									for (int l = 0 ; l &lt; otherFeatureValue.values.size() &amp;&amp; !linkHasToBeDestroyed ; l++) {&#xD;
										for (int m = 0 ; m &lt; allOtherValues.size() &amp;&amp; !linkHasToBeDestroyed ; m++) {&#xD;
											if (otherFeatureValue.values.get(l) == allOtherValues.get(m)) {&#xD;
												linkHasToBeDestroyed = true ;&#xD;
											}&#xD;
										}&#xD;
									}&#xD;
								}&#xD;
							}&#xD;
						}&#xD;
					}&#xD;
					if (linkHasToBeDestroyed) {&#xD;
						linksToDestroy.add(link) ;&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return linksToDestroy ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_7OazwMEhEeKkJbQgitQ3JQ" name="getPotentialLinkEnds" specification="_Hx6mAMEhEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// Retrieves all feature values for the context object for the given feature,&#xD;
		// as well as all interaction point for these values&#xD;
		ValueList potentialLinkEnds = new ValueList() ;&#xD;
		FeatureValue featureValue = context.getFeatureValue(feature) ;&#xD;
		for (int i = 0 ; i &lt; featureValue.values.size() ; i++) {&#xD;
			Value v = featureValue.values.get(i) ;&#xD;
			potentialLinkEnds.add(v) ;&#xD;
			if (v instanceof CS_Reference) {&#xD;
				// add all interaction points associated with v&#xD;
				for (int j = 0 ; j &lt; ((CS_Reference)v).referent.featureValues.size() ; j++) {&#xD;
					if (((CS_Reference)v).referent.featureValues.get(j).feature instanceof Port) {&#xD;
						ValueList interactionPoints = (((CS_Reference)v).referent.featureValues.get(j)).values ;&#xD;
						for (int k = 0 ; k &lt; interactionPoints.size() ; k++) {&#xD;
							potentialLinkEnds.add(interactionPoints.get(k)) ;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return potentialLinkEnds ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2YtwcMEeEeKkJbQgitQ3JQ" name="doAction" visibility="public" method="_2YtwcsEeEeKkJbQgitQ3JQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_2YtwccEeEeKkJbQgitQ3JQ">
            <body>&lt;&lt;TextualRepresentation>>public doAction () { &#xD;
	// If the feature is a port and the input value to be added is a Reference,&#xD;
	// Replaces this Reference by an InteractionPoint, and then behaves &#xD;
	// as usual.&#xD;
	// If the feature is not a port, behaves as usual&#xD;
&#xD;
	AddStructuralFeatureValueAction action = &#xD;
							(AddStructuralFeatureValueAction)(this.node);&#xD;
	StructuralFeature feature = action.structuralFeature;&#xD;
&#xD;
	if (! (feature instanceof Port)) {&#xD;
		// Behaves as usual&#xD;
		super.doAction() ;&#xD;
	}&#xD;
	else {&#xD;
		ValueList inputValues = this.takeTokens(action.value);&#xD;
		// NOTE: Multiplicity of the value input pin is required to be 1..1.&#xD;
		Value inputValue = inputValues.getValue(0);&#xD;
		if (inputValue instanceof Reference) {&#xD;
			// First constructs an InteractionPoint from the inputValue&#xD;
			Reference reference = (Reference)inputValue ;&#xD;
			InteractionPoint interactionPoint = new InteractionPoint() ;&#xD;
			interactionPoint.referent = reference.referent ;&#xD;
			interactionPoint.definingPort = (Port)feature ;&#xD;
			// The value on action.object is necessarily instanceof &#xD;
			// ReferenceToCompositeStructure (otherwise, the feature cannot &#xD;
			// be a port)&#xD;
			ReferenceToCompositeStructure owner = &#xD;
									(ReferenceToCompositeStructure)this&#xD;
													.takeTokens(action.object).getValue(0);&#xD;
			interactionPoint.owner = owner ;&#xD;
			// Then replaces the Reference by an InteractionPoint &#xD;
			// in the inputValues&#xD;
			inputValues.remove(0) ;&#xD;
			inputValues.addValue(0,interactionPoint) ;&#xD;
			// Finally concludes with usual fUML behavior of &#xD;
			// AddStructuralFeatureValueAction (i.e., the usual behavior when &#xD;
			// the value on action.object pin is a StructuredValue)&#xD;
			Integer insertAt = 0;&#xD;
			if (action.insertAt != null) {&#xD;
	    		insertAt = ((UnlimitedNaturalValue)this&#xD;
												.takeTokens(action.insertAt).getValue(0))&#xD;
												.value.naturalValue;&#xD;
			}&#xD;
			if (action.isReplaceAll) {&#xD;
	        	owner.setFeatureValue(feature, inputValues, 0);&#xD;
	    	} else {&#xD;
	        	FeatureValue featureValue = owner.getFeatureValue(feature);&#xD;
	&#xD;
		        if (featureValue.values.size() > 0 &amp; insertAt == 0 ) {&#xD;
		            // If there is no insertAt pin, then the structural feature must &#xD;
					// be unordered, and the insertion position is immaterial.&#xD;
	    	        insertAt = ((ChoiceStrategy)this.getExecutionLocus()&#xD;
												.factory.getStrategy(&quot;choice&quot;))&#xD;
												.choose(featureValue.values.size());&#xD;
	        	}&#xD;
	        	if (feature.multiplicityElement.'isUnique') {&#xD;
	            	// Remove any existing value that duplicates the input value&#xD;
		            Integer j = position(inputValue, featureValue.values, 1);&#xD;
		            if (j > 0) {&#xD;
	    	            featureValue.values.remove(j-1);&#xD;
	        	        if (insertAt > 0 &amp; j &lt; insertAt) {&#xD;
	            	        insertAt = insertAt - 1;&#xD;
	                	}&#xD;
		            }&#xD;
		        }&#xD;
	&#xD;
	    	    if (insertAt &lt;= 0) {  &#xD;
					// Note: insertAt = -1 indicates an unlimited value of &quot;*&quot;&#xD;
	        	    featureValue.values.addValue(inputValue);&#xD;
		        } else {&#xD;
		            featureValue.values.addValue(insertAt - 1, inputValue);&#xD;
	    	    }&#xD;
		    }&#xD;
		}&#xD;
		else {&#xD;
			// behaves as usual&#xD;
			super.doAction();&#xD;
		}&#xD;
	}	&#xD;
} </body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Fc2MEMEhEeKkJbQgitQ3JQ" name="getLinksToDestroy" method="_v1biQMEhEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_SP_ucMEhEeKkJbQgitQ3JQ" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-StructuredValue"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_WIlwoMEhEeKkJbQgitQ3JQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ZdCj8MEhEeKkJbQgitQ3JQ" name="result" type="_wUyA5N2JEeGnO-TF_1T_iQ" direction="return">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Fe92gMEiEeKkJbQgitQ3JQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_FfHngMEiEeKkJbQgitQ3JQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Hx6mAMEhEeKkJbQgitQ3JQ" name="getPotentialLinkEnds" method="_7OazwMEhEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_geoXYMEhEeKkJbQgitQ3JQ" name="context" type="_wUwMMt2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_j4cL0MEhEeKkJbQgitQ3JQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_peiRoMEhEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_B_0tgOYVEeGYZqnbU6eCYw" name="CS_ReadExtentActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_1wMjYOYeEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import fUML.Semantics.Actions.CompleteActions.ReadExtentActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.ExtensionalValueList;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Syntax.Actions.CompleteActions.ReadExtentAction;</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_8j2M4OecEeGYZqnbU6eCYw">
          <body>Extends default fUML semantics in the sense that produced tokens contain CS_References instead of References, in the case where the object is a CS_Object. [Note: This extension can be avoided if fUML introduces a factory for Reference]</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_GfLNsOYVEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-CompleteActions-ReadExtentActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_SKvc8OYVEeGYZqnbU6eCYw" name="doAction" specification="_KW8JcOYVEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Get the extent, at the current execution locus, of the classifier&#xD;
		// (which must be a class) identified in the action.&#xD;
		// Place references to the resulting set of objects on the result pin.&#xD;
		// Extends default fUML semantics in the sense that produced tokens contain&#xD;
		// CS_References instead of References, in the case where the object is a&#xD;
		// CS_Object&#xD;
&#xD;
		ReadExtentAction action = (ReadExtentAction) (this.node);&#xD;
		ExtensionalValueList objects = this.getExecutionLocus().getExtent(&#xD;
				action.classifier);&#xD;
&#xD;
		ValueList references = new ValueList();&#xD;
		for (int i = 0; i &lt; objects.size(); i++) {&#xD;
			Value object = objects.getValue(i);&#xD;
			Reference reference = null ;&#xD;
			if (object instanceof CS_Object) {&#xD;
				reference = new CS_Reference() ;&#xD;
				((CS_Reference)reference).compositeReferent = (CS_Object)object ;&#xD;
			}&#xD;
			else {&#xD;
				reference = new Reference() ;&#xD;
			}&#xD;
			reference.referent = (Object_) object;&#xD;
			references.addValue(reference);&#xD;
		}&#xD;
&#xD;
		this.putTokens(action.result, references);</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_KW8JcOYVEeGYZqnbU6eCYw" name="doAction" method="_SKvc8OYVEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_xomMgDKBEeOOxr3mXNMmgg" name="CS_ReadIsClassifiedObjectActionActivation">
        <generalization xmi:type="uml:Generalization" xmi:id="_YfUlgDKCEeOOxr3mXNMmgg">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-CompleteActions-ReadIsClassifiedObjectActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cca3wDKDEeOOxr3mXNMmgg" name="checkAllParents" specification="_8ehNMDKBEeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		// If the given classifier is not an Interface, behaves like in fUML.&#xD;
		// Otherwise, check if the given type (or one of its direct or indirect ancestors)&#xD;
		// has an InterfaceRealization relationships with the given classifier.&#xD;
		boolean matched = false ;&#xD;
		if (!(classifier instanceof Interface)) {&#xD;
			matched = super.checkAllParents(type, classifier);&#xD;
		}&#xD;
		else if (! (type instanceof Class_)){&#xD;
			matched = false ; &#xD;
		}&#xD;
		else if (this.realizesInterface((Class_)type, (Interface)classifier)) {&#xD;
			matched = true ;&#xD;
		}&#xD;
		else {&#xD;
			ClassifierList directParents = type.general;&#xD;
			int i = 1;&#xD;
			while(!matched &amp; i &lt;= directParents.size()) {&#xD;
				Classifier directParent = directParents.get(i - 1);&#xD;
				matched = this.checkAllParents(directParent, classifier);&#xD;
				i = i + 1;&#xD;
			}&#xD;
		}&#xD;
		return matched ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_kSbxwDKDEeOOxr3mXNMmgg" name="realizesInterface" specification="_BOhYgDKCEeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		// Checks if the given type has an InterfaceRealization relationship&#xD;
		// with the given interface or a descendant of the interface.&#xD;
		InterfaceRealizationList realizations = type.interfaceRealization ;&#xD;
		boolean realized = false ;&#xD;
		int i = 1 ;&#xD;
		while (i &lt;= realizations.size() &amp;&amp; !realized) {&#xD;
			InterfaceRealization realization = realizations.get(i - 1) ;&#xD;
			Interface contract = realization.contract ;&#xD;
			if (contract == interface_) {&#xD;
				realized = true ;&#xD;
			}&#xD;
			else if (this.isDescendant(contract, interface_)) {&#xD;
				realized = true ;&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return realized ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_veOUwDKDEeOOxr3mXNMmgg" name="isDescendant" specification="_NGQbgDKCEeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		// Checks if the given contract is a descendant of the given interface_&#xD;
		boolean matched = false ;&#xD;
		ClassifierList descendants = contract.general ;&#xD;
		int i = 1 ;&#xD;
		while (i &lt;= descendants.size() &amp;&amp; ! matched) {&#xD;
			if (descendants.getValue(i-1) instanceof Interface) {&#xD;
				Interface descendant = (Interface)descendants.getValue(i-1) ;&#xD;
				if (descendant == interface_) {&#xD;
					matched = true ;&#xD;
				}&#xD;
				else {&#xD;
					matched = this.isDescendant(descendant, interface_) ;&#xD;
				}&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return matched ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8ehNMDKBEeOOxr3mXNMmgg" name="checkAllParents" method="_cca3wDKDEeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8ehNMjKBEeOOxr3mXNMmgg" name="type">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Classifier"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8ehNMzKBEeOOxr3mXNMmgg" name="classifier">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Classifier"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8ehNNDKBEeOOxr3mXNMmgg" name="ReturnResult" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_BOhYgDKCEeOOxr3mXNMmgg" name="realizesInterface" method="_kSbxwDKDEeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_GbYe8DKCEeOOxr3mXNMmgg" name="type"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Io2cEDKCEeOOxr3mXNMmgg" name="interface_"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LWMMEDKCEeOOxr3mXNMmgg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_NGQbgDKCEeOOxr3mXNMmgg" name="isDescendant" method="_veOUwDKDEeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QPv8ADKCEeOOxr3mXNMmgg" name="contact"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_SD-SsDKCEeOOxr3mXNMmgg" name="interface_"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_UASOYDKCEeOOxr3mXNMmgg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwzJd2JEeGnO-TF_1T_iQ" name="CS_AcceptEventActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzJt2JEeGnO-TF_1T_iQ">
          <body>The behavior of fUML CallOperationActionActivation::match() is overriden, in order to account for the fact that a given signal instance may need to be matched with triggers where a list of ports is given. (NOTE: Addresses requirement R9 &quot;Specifying one or more ports for an event implies that the event triggers the execution of an associated behavior only if the event was received via one of the specified ports.&quot;)</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_pX-DYOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InvocationActions.Trigger;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.Port;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.PortList;&#xD;
import fUML.Semantics.Actions.CompleteActions.AcceptEventActionActivation;&#xD;
import fUML.Semantics.CommonBehaviors.Communications.SignalInstance;&#xD;
import fUML.Syntax.Actions.CompleteActions.AcceptEventAction;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.Signal;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.SignalEvent;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.TriggerList;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwzLd2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-CompleteActions-AcceptEventActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwzLt2JEeGnO-TF_1T_iQ" name="match" specification="_wUwzNd2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzL92JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzMN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzMd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzMt2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzM92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzNN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Return true if the given signal instance matches a trigger of the accept &#xD;
		// event action of this activation.&#xD;
		// Matching implies that the type of the signalInstance matches the Signal &#xD;
		// of one of the triggers.&#xD;
		// When the type matches with the Signal, and if the trigger specifies a &#xD;
		// list of ports,&#xD;
		// the signalInstance matches the trigger only if it occurred on a port &#xD;
		// identified in the list.&#xD;
&#xD;
		AcceptEventAction action = (AcceptEventAction)(this.node) ;&#xD;
		TriggerList triggers = action.trigger ;&#xD;
		Signal signal = signalInstance.type ;&#xD;
&#xD;
		Boolean matches = false;&#xD;
		Integer i = 1;&#xD;
		while (!matches &amp; i &lt;= triggers.size()) {&#xD;
			Trigger t = triggers.getValue(i-1) ;&#xD;
			matches = ((SignalEvent)t.event).signal == signal ;&#xD;
			if (matches &amp;&amp; t.port.size()>0 ) {&#xD;
				PortList portsOfTrigger = t.port ;&#xD;
				Port onPort =  &#xD;
						((CS_SignalInstance)signalInstance).interactionPoint.definingPort ;&#xD;
				Boolean portMatches = false ;&#xD;
				Integer j = 1 ;&#xD;
				while (! portMatches &amp; j &lt;= portsOfTrigger.size() ) {&#xD;
					portMatches = onPort == portsOfTrigger.getValue(j-1) ;&#xD;
					j = j + 1 ;&#xD;
				}&#xD;
				matches = portMatches ;&#xD;
			}&#xD;
			i = i + 1;&#xD;
		}&#xD;
&#xD;
		return matches;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwzNd2JEeGnO-TF_1T_iQ" name="match" visibility="public" method="_wUwzLt2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzNt2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public match (in signalInstance : SignalInstance) : Boolean {&#xD;
	// Return true if the given signal instance matches a trigger of the accept &#xD;
	// action of this activation.&#xD;
	// Matching implies that the type of the signalInstance matches the Signal &#xD;
	// of one of the triggers.&#xD;
	// When the type matches with the Signal, and if the trigger specifies a &#xD;
	// list of ports,&#xD;
	// the signalInstance matches the trigger only if it occured on a port &#xD;
	// identified in the list.&#xD;
&#xD;
	AcceptEventAction action = (AcceptEventAction)(this.node) ;&#xD;
	TriggerList triggers = action.trigger ;&#xD;
	Signal signal = signalInstance.type ;&#xD;
	&#xD;
	Boolean matches = false;&#xD;
	Integer i = 1;&#xD;
	while (!matches &amp; i &lt;= triggers.size()) {&#xD;
		Trigger t = triggers.getValue(i-1) ;&#xD;
		matches = ((SignalEvent)t.event).signal == signal ;&#xD;
		if (matches &amp;&amp; (t instanceof Composites::Syntax::Trigger)) {&#xD;
			if (! (signalInstance instanceof SignalInstanceWithPort)) {&#xD;
				matches = false ;&#xD;
			}&#xD;
			else {&#xD;
				PortList portsOfTrigger = ((Composites::Syntax::Trigger)t).port ;&#xD;
				Port onPort =  &#xD;
					((SignalInstanceWithPort)signalInstance).interactionPoint&#xD;
																							.definingPort ;&#xD;
				Boolean portMatches = false ;&#xD;
				Integer j = 1 ;&#xD;
				while (! portMatches &amp; j &lt;= portsOfTrigger.size() ) {&#xD;
					portMatches = onPort == portsOfTrigger.getValue(j-1) ;&#xD;
					j = j + 1 ;&#xD;
				}&#xD;
				matches = portMatches ;&#xD;
			}&#xD;
		}&#xD;
	    i = i + 1;&#xD;
	}&#xD;
	&#xD;
	return matches;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzN92JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzON2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzOd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzOt2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzO92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzPN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwMI92JEeGnO-TF_1T_iQ" name="CS_CallOperationActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMJN2JEeGnO-TF_1T_iQ">
          <body>Extends fUML CallOperationActionActivation::getCallExecution() to capture  dispatching semantics of requests across ports. (Note: Adresses requirement R2 &quot;Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.&quot;)</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_0jKwgOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import fUML.Semantics.Actions.BasicActions.CallOperationActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.Execution;&#xD;
import fUML.Syntax.Actions.BasicActions.CallOperationAction;</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwMKN2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-BasicActions-CallOperationActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwMKd2JEeGnO-TF_1T_iQ" name="getCallExecution" specification="_wUwMLd2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwMKt2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwMK92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwMLN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// If onPort is not specified, behaves like in fUML&#xD;
		// If onPort is specified, and if the value on the target input pin is a &#xD;
		// reference, dispatch the operation &#xD;
		// to it and return the resulting execution object.&#xD;
		// As compared to fUML, instead of dispatching directly to target reference &#xD;
		// by calling operation dispatch:&#xD;
		// - If the invoked BehavioralFeature is on a provided Interface but not on any required Interface, &#xD;
		// then, when the InvocationAction is executed, the invocation is made into the object given on &#xD;
		// the target InputPin through the given Port&#xD;
		// - If the invoked BehavioralFeature is on a required Interface but not on any provided Interface, &#xD;
		// then, if the InvocationAction is being executed inside the object given on the target InputPin, &#xD;
		// the invocation is forwarded out of the target object through the given Port.&#xD;
		// - If the invoked BehavioralFeature is on both a provided and a required Interface, &#xD;
		// then, if the InvocationAction is being executed inside the object given on the target InputPin, &#xD;
		// the invocation is made out of the target object through the given Port. &#xD;
		// Otherwise the invocation is made into the target object through the given Port.&#xD;
&#xD;
		CallOperationAction action = (CallOperationAction)(this.node);&#xD;
		Execution execution = null ; &#xD;
		if (action.onPort == null ) {&#xD;
			execution = super.getCallExecution() ;&#xD;
		}&#xD;
		else {&#xD;
			Value target = this.takeTokens(action.target).get(0);&#xD;
			if (target instanceof CS_Reference) {&#xD;
				// Tries to determine if the operation call has to be&#xD;
				// dispatched to the environment or to the internals of&#xD;
				// target, through onPort&#xD;
				CS_Reference targetReference = (CS_Reference)target ;&#xD;
				Object_ executionContext = this.group.activityExecution.context ;&#xD;
				boolean operationIsOnProvidedInterface = this.isOperationProvided(action.onPort, action.operation) ;&#xD;
				boolean operationIsOnRequiredInterface = this.isOperationRequired(action.onPort, action.operation) ;&#xD;
				// Operation on a provided interface only&#xD;
				if (operationIsOnProvidedInterface &amp;&amp; !operationIsOnRequiredInterface) {&#xD;
					execution = targetReference.dispatchIn(action.operation, action.onPort);&#xD;
				}&#xD;
				// Operation is on a required interface only&#xD;
				else if (!operationIsOnProvidedInterface &amp;&amp; operationIsOnRequiredInterface){&#xD;
					// If not executing in the context of the target,&#xD;
					// Semantics are undefined.&#xD;
					// Otherwise, dispatch outside.&#xD;
					if (executionContext == targetReference.referent &#xD;
							|| targetReference.compositeReferent.contains(executionContext)) {&#xD;
						execution = targetReference.dispatchOut(action.operation, action.onPort);&#xD;
					}&#xD;
				}&#xD;
				// Operation is both on a provided and a required interface&#xD;
				else if (operationIsOnProvidedInterface &amp;&amp; operationIsOnRequiredInterface) {&#xD;
					if (executionContext == targetReference.referent &#xD;
							|| targetReference.compositeReferent.contains(executionContext)) {&#xD;
						execution = targetReference.dispatchOut(action.operation, action.onPort);&#xD;
					}&#xD;
					else {&#xD;
						execution = targetReference.dispatchIn(action.operation, action.onPort);&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return execution;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__AmB4MFCEeKkJbQgitQ3JQ" name="doAction" specification="_21gPwMFCEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		CallOperationAction action = (CallOperationAction)(this.node);&#xD;
		// First determines if this is a call to a constructor and if a default &#xD;
		// construction strategy needs to be applied.&#xD;
		// This is a call to a constructor if the called operation has &#xD;
		// stereotype &lt;&lt;Create>> applied. &#xD;
		// The default construction strategy is used if no method is associated with the &#xD;
		// &lt;&lt;Create>> operation.&#xD;
		// Otherwise, behaves like in fUML.&#xD;
		if (action.onPort == null &amp;&amp; this.isCreate(action.operation) &amp;&amp; action.operation.method.size() == 0) {&#xD;
			Locus locus = this.getExecutionLocus() ;&#xD;
			CS_ConstructStrategy strategy = ((CS_ConstructStrategy)locus.factory.getStrategy(&quot;constructStrategy&quot;)) ;&#xD;
			Value target = this.takeTokens(action.target).get(0);&#xD;
			if (target instanceof CS_Reference) {&#xD;
				strategy.construct(action.operation, ((CS_Reference)target).compositeReferent) ;&#xD;
				ParameterList parameters = action.operation.ownedParameter ;&#xD;
				OutputPinList resultPins = action.result ;&#xD;
				ValueList values = new ValueList() ;&#xD;
				values.add(target) ;&#xD;
				int i = 1 ;&#xD;
				while(i &lt;= parameters.size()) {&#xD;
					Parameter parameter = parameters.get(i - 1);&#xD;
					if(parameter.direction == ParameterDirectionKind.return_) {&#xD;
						OutputPin resultPin = resultPins.get(0);&#xD;
						this.putTokens(resultPin, values);&#xD;
					}&#xD;
					i = i + 1;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		else {&#xD;
			super.doAction();&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_vWpcEMFDEeKkJbQgitQ3JQ" name="isOperationProvided" specification="_HZXqsMFDEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		boolean isProvided = false ;&#xD;
		if (operation.owner instanceof Interface) {&#xD;
			// We have to look in provided interfaces of the port if &#xD;
			// they define directly or indirectly the Operation&#xD;
			Integer interfaceIndex = 1 ;&#xD;
			// Iterates on provided interfaces of the port&#xD;
			InterfaceList providedInterfaces = port.provided ;&#xD;
			while (interfaceIndex &lt;= providedInterfaces.size() &amp;&amp; !isProvided) {&#xD;
				Interface interface_ = providedInterfaces.get(interfaceIndex-1) ;&#xD;
				// Iterates on members of the current Interface&#xD;
				Integer memberIndex = 1 ;&#xD;
				while (memberIndex &lt;= interface_.member.size() &amp;&amp; !isProvided) {&#xD;
					NamedElement cddOperation = interface_.member.get(memberIndex-1) ;&#xD;
					if (cddOperation instanceof Operation) {&#xD;
						isProvided = operation == cddOperation ;&#xD;
					}&#xD;
					memberIndex = memberIndex + 1 ;&#xD;
				}&#xD;
				interfaceIndex = interfaceIndex + 1 ;&#xD;
			}&#xD;
		}&#xD;
		return isProvided ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_0nUEcMFDEeKkJbQgitQ3JQ" name="isOperationRequired" specification="_HlRYsMFDEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		boolean isRequired = false ;&#xD;
		Integer interfaceIndex = 1 ;&#xD;
		// Iterates on provided interfaces of the port&#xD;
		InterfaceList requiredInterfaces = port.required ;&#xD;
		while (interfaceIndex &lt;= requiredInterfaces.size() &amp;&amp; !isRequired) {&#xD;
			Interface interface_ = requiredInterfaces.get(interfaceIndex-1) ;&#xD;
			// Iterates on members of the current Interface&#xD;
			Integer memberIndex = 1 ;&#xD;
			while (memberIndex &lt;= interface_.member.size() &amp;&amp; !isRequired) {&#xD;
				NamedElement cddOperation = interface_.member.get(memberIndex-1) ;&#xD;
				if (cddOperation instanceof Operation) {&#xD;
					isRequired = operation == cddOperation ;&#xD;
				}&#xD;
				memberIndex = memberIndex + 1 ;&#xD;
			}&#xD;
			interfaceIndex = interfaceIndex + 1 ;&#xD;
		}&#xD;
		return isRequired ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_3_x1EMFDEeKkJbQgitQ3JQ" name="isCreate" specification="_Hw3ksMFDEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		CS_ExecutionFactory executionFactory = (CS_ExecutionFactory)this.getExecutionLocus().factory ;&#xD;
		Class_ stereotypeCreate = executionFactory.getStereotypeClass(&quot;StandardProfile&quot;, &quot;Create&quot;) ;&#xD;
		if (stereotypeCreate == null) {&#xD;
			// standard profile is not applied&#xD;
			return false ;&#xD;
		}&#xD;
		return executionFactory.getStereotypeApplication(stereotypeCreate, o) != null ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwMLd2JEeGnO-TF_1T_iQ" name="getCallExecution" visibility="public" method="_wUwMKd2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMLt2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public getCallExecution() : Execution { &#xD;
	// If onPort is not specified, behaves like in fUML&#xD;
	// If onPort is specified, and if the value on the target input pin is a &#xD;
	// reference, dispatch the operation &#xD;
	// to it and return the resulting execution object.&#xD;
	// As compared to fUML, instead of dispatching directly to target reference &#xD;
	// by calling operation dispatch,&#xD;
    // dispatchOut is called, so that the operation call will be finally &#xD;
	// dispatched to the environment (from where the execution will be taken).&#xD;
	&#xD;
	CallOperationAction action = (CallOperationAction)(this.node);&#xD;
	Execution execution = null ; &#xD;
	if (action.onPort == null ) {&#xD;
		execution = super.getCallExecution() ;&#xD;
	}&#xD;
	else {&#xD;
		Value target = this.takeTokens(action.target).getValue(0);&#xD;
		if (target instanceof ReferenceToCompositeStructure) {&#xD;
	    	execution = ((ReferenceToCompositeStructure)target)&#xD;
										.dispatchOut(action.operation, action.onPort);&#xD;
		}&#xD;
	}&#xD;
	return execution;&#xD;
&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwML92JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwMMN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwMMd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_21gPwMFCEeKkJbQgitQ3JQ" name="doAction" method="__AmB4MFCEeKkJbQgitQ3JQ"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_HZXqsMFDEeKkJbQgitQ3JQ" name="isOperationProvided" method="_vWpcEMFDEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QEwGcMFDEeKkJbQgitQ3JQ" name="port"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Tdzs8MFDEeKkJbQgitQ3JQ" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_WElh8MFDEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_HlRYsMFDEeKkJbQgitQ3JQ" name="isOperationRequired" method="_0nUEcMFDEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dmdX8cFDEeKkJbQgitQ3JQ" name="port"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dmdX8sFDEeKkJbQgitQ3JQ" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dmdX8MFDEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Hw3ksMFDEeKkJbQgitQ3JQ" name="isCreate" method="_3_x1EMFDEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_eZySUcFDEeKkJbQgitQ3JQ" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_eZySUsFDEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwMFt2JEeGnO-TF_1T_iQ" name="CS_SendSignalActionActivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMF92JEeGnO-TF_1T_iQ">
          <body>Extends semantics of fUML SendSignalActionActivation::doAction() to capture propagation of signals across ports. (Note: Addresses requirement R2 &quot;Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.&quot;)</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_5bWAYOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.Property;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.PropertyList;&#xD;
import fUML.Semantics.Actions.BasicActions.SendSignalActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Syntax.Actions.BasicActions.InputPin;&#xD;
import fUML.Syntax.Actions.BasicActions.InputPinList;&#xD;
import fUML.Syntax.Actions.BasicActions.SendSignalAction;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.Signal;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwMH92JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Actions-BasicActions-SendSignalActionActivation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwMIN2JEeGnO-TF_1T_iQ" name="doAction" specification="_wUwMId2JEeGnO-TF_1T_iQ">
          <language>Java</language>
          <body>		// If onPort is not specified, behaves like in fUML&#xD;
		// If onPort is specified,&#xD;
		// Get the value from the target pin. If the value is not a reference, &#xD;
		// then do nothing.&#xD;
		// Otherwise, construct a signal using the values from the argument pins&#xD;
		// As compared to fUML, instead of sending directly to target reference &#xD;
		// by calling operation send:&#xD;
		// - If the InvocationAction is being executed inside the object given &#xD;
		// on the target InputPin, the invocation is made out of the target object &#xD;
		// through the given Port. &#xD;
		// Otherwise the invocation is made into the target object through the &#xD;
		// given Port.&#xD;
&#xD;
		SendSignalAction action = (SendSignalAction)(this.node);&#xD;
&#xD;
		if (action.onPort == null) {&#xD;
			// Behaves like in fUML&#xD;
			this.doActionDefault() ;&#xD;
		}&#xD;
		else {&#xD;
			Value target = this.takeTokens(action.target).get(0) ;&#xD;
&#xD;
			if (target instanceof CS_Reference) {&#xD;
				// Constructs the signal instance&#xD;
				Signal signal = action.signal;&#xD;
				CS_SignalInstance signalInstance = new CS_SignalInstance();&#xD;
				signalInstance.type = signal;&#xD;
&#xD;
				PropertyList attributes = signal.ownedAttribute ;&#xD;
				InputPinList argumentPins = action.argument ;&#xD;
				Integer i = 0 ;&#xD;
				while ( i &lt; attributes.size()) {&#xD;
					Property attribute = attributes.get(i);&#xD;
					InputPin argumentPin = argumentPins.get(i);&#xD;
					ValueList values = this.takeTokens(argumentPin);&#xD;
					signalInstance.setFeatureValue(attribute, values, 0);&#xD;
					i = i + 1 ;&#xD;
				}&#xD;
&#xD;
				// Tries to determine if the signal has to be&#xD;
				// sent to the environment or to the internals of&#xD;
				// target, through onPort&#xD;
				CS_Reference targetReference = (CS_Reference)target ;&#xD;
				//Port onPort = action.onPort ;&#xD;
				Object_ executionContext = this.group.activityExecution.context ;&#xD;
				if (executionContext == targetReference.referent &#xD;
						|| targetReference.compositeReferent.contains(executionContext)) {&#xD;
					targetReference.sendOut(signalInstance, action.onPort);&#xD;
				}&#xD;
				else {&#xD;
					targetReference.sendIn(signalInstance, action.onPort);&#xD;
				}&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ta-20OYcEeGYZqnbU6eCYw" name="doActionDefault" specification="_nDvn8OYcEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// Get the value from the target pin. If the value is not a reference,&#xD;
		// then do nothing.&#xD;
		// Otherwise, construct a signal using the values from the argument pins&#xD;
		// and send it to the referent object.&#xD;
		// This operation captures same semantics as fUML&#xD;
		// SendSignalActionActivation.doAction() except that it constructs&#xD;
		// a CS_SignalInstance instead of a SignalInstance&#xD;
&#xD;
		SendSignalAction action = (SendSignalAction) (this.node);&#xD;
		Value target = this.takeTokens(action.target).getValue(0);&#xD;
&#xD;
		if (target instanceof Reference) {&#xD;
			Signal signal = action.signal;&#xD;
&#xD;
			CS_SignalInstance signalInstance = new CS_SignalInstance();&#xD;
			signalInstance.type = signal;&#xD;
&#xD;
			PropertyList attributes = signal.ownedAttribute;&#xD;
			InputPinList argumentPins = action.argument;&#xD;
			for (int i = 0; i &lt; attributes.size(); i++) {&#xD;
				Property attribute = attributes.getValue(i);&#xD;
				InputPin argumentPin = argumentPins.getValue(i);&#xD;
				ValueList values = this.takeTokens(argumentPin);&#xD;
				signalInstance.setFeatureValue(attribute, values, 0);&#xD;
			}&#xD;
&#xD;
			((Reference) target).send(signalInstance);&#xD;
		}</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwMId2JEeGnO-TF_1T_iQ" name="doAction" visibility="public" method="_wUwMIN2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMIt2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public doAction () { &#xD;
    // If onPort is not specified, behaves like in fUML&#xD;
	// If onPort is specified,&#xD;
	// Get the value from the target pin. If the value is not a reference, &#xD;
	// then do nothing.&#xD;
	// Otherwise, construct a signal using the values from the argument pins&#xD;
	// As compared to fUML, instead of sending directly to target reference &#xD;
	// by calling operation send,&#xD;
    // sendOut is called, so that the constructed signal will be finally sent &#xD;
	// to the environment.&#xD;
	&#xD;
	SendSignalAction action = (SendSignalAction)(this.node);&#xD;
&#xD;
	if (action.onPort == null) {&#xD;
		super.doAction() ;&#xD;
	}&#xD;
	else {&#xD;
		Value target = this.takeTokens(action.target).getValue(0) ;&#xD;
	&#xD;
		if (target instanceof ReferenceToCompositeStructure) {&#xD;
		    Signal signal = action.signal;&#xD;
		    SignalInstance signalInstance = new SignalInstance();&#xD;
		    signalInstance.type = signal;&#xD;
	&#xD;
		    PropertyList attributes = signal.ownedAttribute;&#xD;
		    InputPinList argumentPins = action.argument;&#xD;
			Integer i = 0 ;&#xD;
		    while ( i &lt; attributes.size()) {&#xD;
		        Property attribute = attributes.getValue(i);&#xD;
		        InputPin argumentPin = argumentPins.getValue(i);&#xD;
		        ValueList values = this.takeTokens(argumentPin);&#xD;
		        signalInstance.setFeatureValue(attribute, values, 0);&#xD;
		    }&#xD;
	    &#xD;
			ReferenceToCompositeStructure targetReference = &#xD;
					(ReferenceToCompositeStructure)target ;&#xD;
			Port onPort = action.onPort ;&#xD;
			targetReference.sendOut(signalInstance, onPort) ;&#xD;
		}&#xD;
	}&#xD;
}</body>
          </ownedComment>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_nDvn8OYcEeGYZqnbU6eCYw" name="doActionDefault" method="_ta-20OYcEeGYZqnbU6eCYw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_WuOboOeIEeGYZqnbU6eCYw" name="CS_RequestPropagationStrategy" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_xMxR0OeaEeGYZqnbU6eCYw">
          <body>This semantic strategy is introduced to enable semantic variants related to propagation of requests through connectors, in the case where multiple propagation paths are possible. Concrete strategy classes shall provide a behavior for abstract operation select.</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_Be7fcOegEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import fUML.Semantics.Classes.Kernel.ReferenceList;&#xD;
import fUML.Semantics.Loci.LociL1.SemanticStrategy;&#xD;
import fUML.Semantics.Loci.LociL1.SemanticVisitor;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_qnVUEOeIEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticStrategy"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_3ZSjoOeIEeGYZqnbU6eCYw" name="getName" specification="_uGsW4OeIEeGYZqnbU6eCYw">
          <language>Java</language>
          <body>		// a CS_RequestPropagationStrategy are always named &quot;requestPropagation&quot;&#xD;
		return &quot;requestPropagation&quot;;&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_uGsW4OeIEeGYZqnbU6eCYw" name="getName" method="_3ZSjoOeIEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_yybtQOeIEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_-62QkOeIEeGYZqnbU6eCYw" name="select" isAbstract="true">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_cNnnEOeJEeGYZqnbU6eCYw" name="potentialTargets">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_dcfN8OeJEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dckGcOeJEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iOKNMOeJEeGYZqnbU6eCYw" name="context">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticVisitor"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_n8XtMOeJEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_o5Xg8OeJEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_o5cZcOeJEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_A8IWYOeKEeGYZqnbU6eCYw" name="CS_DefaultRequestPropagationStrategy">
        <ownedComment xmi:type="uml:Comment" xmi:id="_C3r0YOebEeGYZqnbU6eCYw">
          <body>This class proposes a basic semantic variant for the semantic variation point captured by CS_RequestPropagationSrategy. This semantic variants consists in broadcasting the request to all possible targets in the case where the request concerns a signal sending. In the case where the request concerns an operation call, only the first target is kept.</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_5WNE0OefEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import fUML.Semantics.Actions.BasicActions.SendSignalActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.ReferenceList;&#xD;
import fUML.Semantics.Loci.LociL1.SemanticVisitor;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_HSolcOeKEeGYZqnbU6eCYw" general="_WuOboOeIEeGYZqnbU6eCYw"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_8dVaYOeKEeGYZqnbU6eCYw" name="select" specification="_OhIMcOeKEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_FrsAUOeLEeGYZqnbU6eCYw" name="potentialTargets">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OCzcQOeLEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OC9NQOeLEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_HZipQOeLEeGYZqnbU6eCYw" name="semanticVisitor">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticVisitor"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_JMAscOeLEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ZmQRUOeLEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_Zmb3gOeLEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// returns all potential targets in the case where the context is a SendSignalActionActivation&#xD;
		// returns the first potential target in the case where the context is anything else&#xD;
		ReferenceList selectedTargets = new ReferenceList() ;&#xD;
		if (context instanceof SendSignalActionActivation) {&#xD;
			for (int i = 0 ; i &lt; potentialTargets.size() ; i++) {&#xD;
				selectedTargets.addValue(potentialTargets.getValue(i)) ;&#xD;
			}&#xD;
		}&#xD;
		else { &#xD;
			if (potentialTargets.size() >= 1) {&#xD;
				selectedTargets.addValue(potentialTargets.get(0)) ;&#xD;
			}&#xD;
		}&#xD;
		return selectedTargets;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_OhIMcOeKEeGYZqnbU6eCYw" name="select" method="_8dVaYOeKEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OhIMceeKEeGYZqnbU6eCYw" name="potentialTargets">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OhIMcueKEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OhIMc-eKEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OhIMdOeKEeGYZqnbU6eCYw" name="context">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticVisitor"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OhIMdeeKEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_OhIMdueKEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_OhIMd-eKEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_didLwJtyEeKfyJQ76Ld1Rg" name="CS_ConstructStrategy" isAbstract="true">
        <generalization xmi:type="uml:Generalization" xmi:id="_nFGfUJt1EeKfyJQ76Ld1Rg">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticStrategy"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_75QyoMFEEeKkJbQgitQ3JQ" name="getName" specification="_n60GsJtyEeKfyJQ76Ld1Rg">
          <language>Java</language>
          <body>		// a CS_ConstructionStrategy is always named &quot;constructStrategy&quot;&#xD;
		return &quot;constructStrategy&quot;;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_n60GsJtyEeKfyJQ76Ld1Rg" name="getName" method="_75QyoMFEEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_sTORYJtyEeKfyJQ76Ld1Rg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_yQWXIJtyEeKfyJQ76Ld1Rg" name="construct" isAbstract="true">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_-R6EgJtyEeKfyJQ76Ld1Rg" name="constructor">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_DptPoJtzEeKfyJQ76Ld1Rg" name="context" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_igycEJt0EeKfyJQ76Ld1Rg" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_tzBlUJt0EeKfyJQ76Ld1Rg" name="CS_DefaultConstructStrategy">
        <generalization xmi:type="uml:Generalization" xmi:id="_0EFTsJt0EeKfyJQ76Ld1Rg" general="_didLwJtyEeKfyJQ76Ld1Rg"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_aXlM0DJwEeOOxr3mXNMmgg" name="locus" association="_aXuWwDJwEeOOxr3mXNMmgg">
          <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-Locus"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_aXlM0TJwEeOOxr3mXNMmgg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_aXlM0jJwEeOOxr3mXNMmgg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_988Q0DJyEeOOxr3mXNMmgg" name="defaultAssociation" aggregation="composite" association="_99Go4DJyEeOOxr3mXNMmgg">
          <type xmi:type="uml:Class" href="../Syntax/UML.uml#Association"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_988Q0TJyEeOOxr3mXNMmgg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_988Q0jJyEeOOxr3mXNMmgg" value="1"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_uQ9pkMFHEeKkJbQgitQ3JQ" name="construct" specification="_4h3GkJt0EeKfyJQ76Ld1Rg">
          <language>Java</language>
          <body>		this.locus = context.locus ;&#xD;
		return this.constructObject(context, (Class_)constructor.type) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_37ktsMFHEeKkJbQgitQ3JQ" name="canInstantiate" specification="_1Dms8MFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// Instantiate is possible if:&#xD;
		// - p is composite&#xD;
		// - p is typed&#xD;
		// - This type is a Class and it is not abstract&#xD;
		// - Or p is a Port and the type is an Interface&#xD;
		if (p.isComposite) {&#xD;
			if (p.typedElement.type != null) {&#xD;
				if (p.typedElement.type instanceof Class_) {&#xD;
					return ! ((Class_)p.typedElement.type).isAbstract ;&#xD;
				}&#xD;
				else if (p.typedElement.type instanceof Interface) { &#xD;
					return p instanceof Port ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return false ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="__jjLsMFHEeKkJbQgitQ3JQ" name="constructObject" specification="_1M-rYMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		CS_Reference referenceToContext = new CS_Reference() ;&#xD;
		referenceToContext.referent = context ;&#xD;
		referenceToContext.compositeReferent = (CS_Object)context ;&#xD;
		// FIXME detect infinite recursive instantiation&#xD;
		PropertyList allAttributes = type.attribute ;&#xD;
		int i = 1 ;&#xD;
		// Instantiate ports and parts&#xD;
		while (i &lt;= allAttributes.size()) {&#xD;
			Property p = allAttributes.get(i - 1) ;&#xD;
			if (p.default_ != null) {&#xD;
				ValueSpecification defaultValueSpecification = p.default_ ;&#xD;
				Evaluation evaluation = (Evaluation)context.locus.factory.instantiateVisitor(defaultValueSpecification) ;&#xD;
				evaluation.specification = defaultValueSpecification ;&#xD;
				evaluation.locus = context.locus ;&#xD;
				if (evaluation instanceof CS_OpaqueExpressionEvaluation) {&#xD;
					ValueList evaluations = ((CS_OpaqueExpressionEvaluation)evaluation).executeExpressionBehavior() ;&#xD;
					for (int j = 0 ; j &lt; evaluations.size() ; j++) {&#xD;
						this.addStructuralFeatureValue(referenceToContext, p, evaluations.get(j)) ;&#xD;
					}&#xD;
				}&#xD;
				else {&#xD;
					Value defaultValue = evaluation.evaluate() ;&#xD;
					this.addStructuralFeatureValue(referenceToContext, p, defaultValue) ;&#xD;
				}&#xD;
			}&#xD;
			else &#xD;
				if (this.canInstantiate(p)) {&#xD;
					int j = 1 ;&#xD;
					while (j &lt;= p.multiplicityElement.lower) {&#xD;
						Object_ value ;&#xD;
						// if p is a Port typed by an Interface&#xD;
						// creates an Object without type, but with FeatureValues corresponding to &#xD;
						// structural features of the interface.&#xD;
						if (p instanceof Port &amp;&amp; p.typedElement.type instanceof Interface) {&#xD;
							value = this.instantiateInterface((Interface)p.typedElement.type, this.locus) ;&#xD;
							this.addStructuralFeatureValue(referenceToContext, p, value);&#xD;
						}&#xD;
						else {&#xD;
							value = context.locus.instantiate((Class_)p.typedElement.type) ;&#xD;
							// TODO account for existing constructors&#xD;
							value = this.constructObject((CS_Object)value, (Class_)p.typedElement.type) ;&#xD;
							this.addStructuralFeatureValue(referenceToContext, p, (CS_Object)value) ;&#xD;
							if (((Class_)p.typedElement.type).isActive) {&#xD;
								value.startBehavior((Class_)p.typedElement.type, new ParameterValueList()) ;&#xD;
							}&#xD;
						}&#xD;
						j = j + 1 ;&#xD;
					}&#xD;
				}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		// Instantiate connectors&#xD;
		NamedElementList allMembers = type.member ;&#xD;
		i = 1 ;&#xD;
		while (i &lt;= allMembers.size()) {&#xD;
			NamedElement member = allMembers.get(i - 1) ;&#xD;
			if (member instanceof Connector) {&#xD;
				Connector connector = (Connector)member ;&#xD;
				if (this.isArrayPattern(connector)) {&#xD;
					this.generateArrayPattern(referenceToContext, connector) ;&#xD;
				}&#xD;
				else if (this.isStarPattern(connector)) {&#xD;
					this.generateStarPattern(referenceToContext, connector) ;&#xD;
				}&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return referenceToContext.referent ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JD6HoMFIEeKkJbQgitQ3JQ" name="generateArrayPattern" specification="_1ZLUUMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		ConnectorEnd end1 = connector.end.getValue(0) ;&#xD;
		ConnectorEnd end2 = connector.end.getValue(1) ;&#xD;
		ReferenceList end1Values = this.getValuesFromConnectorEnd(context, end1) ;&#xD;
		ReferenceList end2Values = this.getValuesFromConnectorEnd(context, end2) ;&#xD;
		for (int i = 0 ; i &lt; end1Values.size() ; i++) {&#xD;
			CS_Link link = new CS_Link() ;&#xD;
			if (connector.type == null) {&#xD;
				link.type = this.getDefaultAssociation() ;&#xD;
			}&#xD;
			else {&#xD;
				link.type = connector.type ;&#xD;
			}&#xD;
			ValueList valuesForEnd1 = new ValueList() ;&#xD;
			valuesForEnd1.add(end1Values.get(i)) ;&#xD;
			ValueList valuesForEnd2 = new ValueList() ;&#xD;
			valuesForEnd2.add(end2Values.get(i)) ;&#xD;
			link.setFeatureValue(link.type.ownedEnd.getValue(0), valuesForEnd1, -1) ;&#xD;
			link.setFeatureValue(link.type.ownedEnd.getValue(1), valuesForEnd2, -1) ;&#xD;
			link.addTo(context.referent.locus) ;&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_QRQfIMFIEeKkJbQgitQ3JQ" name="generateStarPattern" specification="_1jvlkMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		ConnectorEnd end1 = connector.end.getValue(0) ;&#xD;
		ConnectorEnd end2 = connector.end.getValue(1) ;&#xD;
		ReferenceList end1Values = this.getValuesFromConnectorEnd(context, end1) ;&#xD;
		ReferenceList end2Values = this.getValuesFromConnectorEnd(context, end2) ;&#xD;
		for (int i = 0 ; i &lt; end1Values.size() ; i++) {&#xD;
			for (int j = 0 ; j &lt; end2Values.size(); j++) {&#xD;
				CS_Link link = new CS_Link() ;&#xD;
				if (connector.type == null) {&#xD;
					link.type = this.getDefaultAssociation() ;&#xD;
				}&#xD;
				else {&#xD;
					link.type = connector.type ;&#xD;
				}&#xD;
				ValueList valuesForEnd1 = new ValueList() ;&#xD;
				valuesForEnd1.add(end1Values.get(i)) ;&#xD;
				ValueList valuesForEnd2 = new ValueList() ;&#xD;
				valuesForEnd2.add(end2Values.get(j)) ;&#xD;
				link.setFeatureValue(link.type.ownedEnd.get(0), valuesForEnd1, -1) ;&#xD;
				link.setFeatureValue(link.type.ownedEnd.get(1), valuesForEnd2, -1) ;&#xD;
				link.addTo(context.referent.locus) ;&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Zm4KsMFIEeKkJbQgitQ3JQ" name="getCardinality" specification="_1wircMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		int lowerOfRole = end.role.actualConnectableElement.multiplicityElement.lower ;&#xD;
		if (lowerOfRole == 0) {&#xD;
			return 0 ;&#xD;
		}&#xD;
		else if (end.partWithPort == null) {&#xD;
			return lowerOfRole ;&#xD;
		}&#xD;
		else {&#xD;
			int lowerOfPart = end.partWithPort.multiplicityElement.lower ;&#xD;
			return lowerOfRole * lowerOfPart ;&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_jTjrYMFIEeKkJbQgitQ3JQ" name="getValuesFromConnectorEnd" specification="_18SocMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		ReferenceList endValues = new ReferenceList() ;&#xD;
		if (end.partWithPort != null) {&#xD;
			FeatureValue valueForPart = context.getFeatureValue(end.partWithPort) ;&#xD;
			if (valueForPart != null) {&#xD;
				for (int i = 0 ; i &lt; valueForPart.values.size() ; i++) {&#xD;
					Reference reference = (Reference)valueForPart.values.get(i) ;&#xD;
					FeatureValue valueForPort = reference.getFeatureValue((Port)end.role.actualConnectableElement) ;&#xD;
					if (valueForPort != null) {&#xD;
						for (int j = 0 ; j &lt; valueForPort.values.size() ; j++) {&#xD;
							endValues.add((Reference)valueForPort.values.get(j)) ;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		else {&#xD;
			FeatureValue valueForRole = context.getFeatureValue((Property)end.role.actualConnectableElement) ;&#xD;
			if (valueForRole != null) {&#xD;
				for (int i = 0 ; i &lt; valueForRole.values.size() ; i++) {&#xD;
					endValues.add((Reference)valueForRole.values.get(i)) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return endValues ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_sITegMFIEeKkJbQgitQ3JQ" name="isArrayPattern" specification="_2IClcMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// This is an array pattern if:&#xD;
		// - c is binary&#xD;
		// - lower bound of the two connector ends is 1&#xD;
		// - Cardinality of ends are equals&#xD;
		if (c.end.size() == 2) {&#xD;
			if (c.end.get(0).role.actualConnectableElement.multiplicityElement.lower == 1) {&#xD;
				if (c.end.get(1).role.actualConnectableElement.multiplicityElement.lower == 1) {&#xD;
					if (this.canInstantiate(c.end.get(0).role.actualConnectableElement)&#xD;
							&amp;&amp; this.canInstantiate(c.end.get(1).role.actualConnectableElement)) {&#xD;
						int cardinality1 = this.getCardinality(c.end.get(0)) ;&#xD;
						int cardinality2 = this.getCardinality(c.end.get(1)) ;&#xD;
						return cardinality1 == cardinality2 ;&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return false ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_zPjOAMFIEeKkJbQgitQ3JQ" name="isStarPattern" specification="_2U1rUMFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// This is an array pattern if:&#xD;
		// - c is binary&#xD;
		// - lower bound of end1 equals cardinality of end1&#xD;
		// - lower bound of end2 equals cardinality of end2&#xD;
		if (c.end.size() == 2) {&#xD;
			if (this.canInstantiate(c.end.get(0).role.actualConnectableElement)&#xD;
					&amp;&amp; this.canInstantiate(c.end.get(1).role.actualConnectableElement)) {&#xD;
				int cardinalityOfEnd1 = this.getCardinality(c.end.get(0)) ;&#xD;
				int lowerBoundofEnd1 = c.end.get(0).role.actualConnectableElement.multiplicityElement.lower ;&#xD;
				if (cardinalityOfEnd1 == lowerBoundofEnd1) {&#xD;
					int cardinalityOfEnd2 = this.getCardinality(c.end.get(1)) ;&#xD;
					int lowerBoundofEnd2 = c.end.get(1).role.actualConnectableElement.multiplicityElement.lower ;&#xD;
					return cardinalityOfEnd2 == lowerBoundofEnd2 ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return false ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_9Gp2AMFIEeKkJbQgitQ3JQ" name="addStructuralFeatureValue" specification="_04Tb4MFFEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		FeatureValue featureValue = context.getFeatureValue(feature) ;&#xD;
		if (featureValue != null) {&#xD;
			ValueList values = featureValue.values ;&#xD;
			if (feature instanceof Port) {&#xD;
				// insert an interaction point&#xD;
				CS_InteractionPoint interactionPoint = new CS_InteractionPoint() ;&#xD;
				interactionPoint.definingPort = (Port)feature ;&#xD;
				interactionPoint.referent = (CS_Object)value ;&#xD;
				interactionPoint.owner = context ;&#xD;
				values.add(interactionPoint) ;&#xD;
			}&#xD;
			else if (value instanceof CS_Object) {&#xD;
				// insert a reference&#xD;
				CS_Reference reference = new CS_Reference() ;&#xD;
				reference.compositeReferent = (CS_Object)value ;&#xD;
				reference.referent = (CS_Object)value ;&#xD;
				values.add(reference) ;&#xD;
			}&#xD;
			else {&#xD;
				values.add(value) ;&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_hjaLQDJ5EeOOxr3mXNMmgg" name="getDefaultAssociation" specification="_Xw5XEDJzEeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		// Computes an returns an Association with two untyped owned ends, &#xD;
		// with multiplicity [*].&#xD;
		// This association can be used to type links instantiated from untyped connectors&#xD;
		if (defaultAssociation == null) {&#xD;
			defaultAssociation = new Association() ;&#xD;
			defaultAssociation.name = &quot;DefaultGeneratedAssociation&quot;;&#xD;
			Property end1 = new Property() ;&#xD;
			end1.setName(&quot;x&quot;); ;&#xD;
			end1.setLower(0);&#xD;
			end1.setUpper(-1);&#xD;
			end1.setIsOrdered(true);&#xD;
			end1.setIsUnique(true);&#xD;
			defaultAssociation.addOwnedEnd(end1);&#xD;
			Property end2 = new Property() ;&#xD;
			end2.setName(&quot;y&quot;);&#xD;
			end2.setLower(0);&#xD;
			end2.setUpper(-1);&#xD;
			end2.setIsOrdered(true);&#xD;
			end2.setIsUnique(true);&#xD;
			defaultAssociation.addOwnedEnd(end2);&#xD;
		}&#xD;
		return defaultAssociation ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wEQlkDJ5EeOOxr3mXNMmgg" name="instantiateInterface" specification="_KRQQMDJ1EeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		Class_ realizingClass = this.getRealizingClass(interface_) ;&#xD;
		Object_ object = locus.instantiate(realizingClass) ;&#xD;
		return object ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2yafoDJ5EeOOxr3mXNMmgg" name="getRealizingClass" specification="_tHXeADJ2EeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		Class_ realizingClass = null ;&#xD;
		// TODO For cached RealizingClasses, search based on InterfaceRealizations rather than name&#xD;
		String realizingClassName = interface_.qualifiedName + &quot;GeneratedRealizingClass&quot; ;&#xD;
		int i = 1 ;&#xD;
		while (i &lt;= generatedRealizingClasses.size() &amp;&amp; realizingClass == null) {&#xD;
			Class_ cddRealizingClass = generatedRealizingClasses.getValue(i - 1) ;&#xD;
			if (cddRealizingClass.name.equals(realizingClassName)) {&#xD;
				realizingClass = cddRealizingClass ;&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		if (realizingClass == null) {&#xD;
			realizingClass = this.generateRealizingClass(interface_, realizingClassName) ;&#xD;
			generatedRealizingClasses.addValue(realizingClass) ;&#xD;
		}&#xD;
		return realizingClass ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_BfOAkDJ6EeOOxr3mXNMmgg" name="generateRealizingClass" specification="_GSr28DJ3EeOOxr3mXNMmgg">
          <language>JAVA</language>
          <body>		Class_ realizingClass = new Class_() ;&#xD;
		realizingClass.setName(className) ;&#xD;
		InterfaceRealization realization = new InterfaceRealization() ;&#xD;
		realization.contract = interface_ ;&#xD;
		realization.implementingClassifier = realizingClass ;&#xD;
		realizingClass.interfaceRealization.addValue(realization); &#xD;
		// TODO Deal with structural features of the interface&#xD;
		// TODO Make a test case for reading/writing structural features of an interface&#xD;
		return realizingClass ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_4h3GkJt0EeKfyJQ76Ld1Rg" name="construct" method="_uQ9pkMFHEeKkJbQgitQ3JQ" redefinedOperation="_yQWXIJtyEeKfyJQ76Ld1Rg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4h3GkZt0EeKfyJQ76Ld1Rg" name="constructor">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4h3Gkpt0EeKfyJQ76Ld1Rg" name="context" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4h3Gk5t0EeKfyJQ76Ld1Rg" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_04Tb4MFFEeKkJbQgitQ3JQ" name="addStructuralFeatureValue" method="_9Gp2AMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Fp_3cMFGEeKkJbQgitQ3JQ" name="context" type="_wUwMMt2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_I7BjUMFGEeKkJbQgitQ3JQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Property"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LZLAwMFGEeKkJbQgitQ3JQ" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_1Dms8MFFEeKkJbQgitQ3JQ" name="canInstantiate" method="_37ktsMFHEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Xx1mkMFGEeKkJbQgitQ3JQ" name="p">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Property"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_adFE0MFGEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_1M-rYMFFEeKkJbQgitQ3JQ" name="constructObject" method="__jjLsMFHEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_jYrG0MFGEeKkJbQgitQ3JQ" name="context" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mB06YMFGEeKkJbQgitQ3JQ" name="type"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_qplvsMFGEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_1ZLUUMFFEeKkJbQgitQ3JQ" name="generateArrayPattern" method="_JD6HoMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wnMWkMFGEeKkJbQgitQ3JQ" name="context" type="_wUwMMt2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_zSuvwMFGEeKkJbQgitQ3JQ" name="connector"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_1jvlkMFFEeKkJbQgitQ3JQ" name="generateStarPattern" method="_QRQfIMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4GidAcFGEeKkJbQgitQ3JQ" name="context" type="_wUwMMt2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4GidAMFGEeKkJbQgitQ3JQ" name="connector"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_1wircMFFEeKkJbQgitQ3JQ" name="getCardinality" method="_Zm4KsMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_AzGkgMFHEeKkJbQgitQ3JQ" name="end"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_DVHOQMFHEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_18SocMFFEeKkJbQgitQ3JQ" name="getValuesFromConnectorEnd" method="_jTjrYMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LIQacMFHEeKkJbQgitQ3JQ" name="context" type="_wUwMMt2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_NLBjcMFHEeKkJbQgitQ3JQ" name="end"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QXSrIMFHEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_RRUDYMFHEeKkJbQgitQ3JQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RRUDYcFHEeKkJbQgitQ3JQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2IClcMFFEeKkJbQgitQ3JQ" name="isArrayPattern" method="_sITegMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dFh4UMFHEeKkJbQgitQ3JQ" name="c"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_fPl8IMFHEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_2U1rUMFFEeKkJbQgitQ3JQ" name="isStarPattern" method="_zPjOAMFIEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iSVUYMFHEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iSVUYcFHEeKkJbQgitQ3JQ" name="c"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Xw5XEDJzEeOOxr3mXNMmgg" name="getDefaultAssociation" method="_hjaLQDJ5EeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_gJxGgDJzEeOOxr3mXNMmgg" name="result" direction="return">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Association"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_KRQQMDJ1EeOOxr3mXNMmgg" name="instantiateInterface" method="_wEQlkDJ5EeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_fhWwwDJ1EeOOxr3mXNMmgg" name="interface"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_l9KWkDJ1EeOOxr3mXNMmgg" name="locus">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-Locus"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_tWulIDJ1EeOOxr3mXNMmgg" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_tHXeADJ2EeOOxr3mXNMmgg" name="getRealizingClass" method="_2yafoDJ5EeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_3AkXwDJ2EeOOxr3mXNMmgg" name="interface_"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8rmA4DJ2EeOOxr3mXNMmgg" name="result" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_GSr28DJ3EeOOxr3mXNMmgg" name="generateRealizingClass" method="_BfOAkDJ6EeOOxr3mXNMmgg">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_GSr28TJ3EeOOxr3mXNMmgg" name="interface_"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_GSr28jJ3EeOOxr3mXNMmgg" name="result" direction="return"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Py8sQDJ3EeOOxr3mXNMmgg" name="className">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_aXuWwDJwEeOOxr3mXNMmgg" name="cS_DefaultConstructStrategy_locus_1" memberEnd="_aXuWwTJwEeOOxr3mXNMmgg _aXlM0DJwEeOOxr3mXNMmgg">
        <ownedEnd xmi:type="uml:Property" xmi:id="_aXuWwTJwEeOOxr3mXNMmgg" name="cS_DefaultConstructStrategy" type="_tzBlUJt0EeKfyJQ76Ld1Rg" association="_aXuWwDJwEeOOxr3mXNMmgg">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_aXuWwjJwEeOOxr3mXNMmgg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_aXuWwzJwEeOOxr3mXNMmgg" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_99Go4DJyEeOOxr3mXNMmgg" name="cS_DefaultConstructStrategy_association_1" memberEnd="_99Go4TJyEeOOxr3mXNMmgg _988Q0DJyEeOOxr3mXNMmgg">
        <ownedEnd xmi:type="uml:Property" xmi:id="_99Go4TJyEeOOxr3mXNMmgg" name="cS_DefaultConstructStrategy" type="_tzBlUJt0EeKfyJQ76Ld1Rg" association="_99Go4DJyEeOOxr3mXNMmgg">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_99Go4jJyEeOOxr3mXNMmgg" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_99Go4zJyEeOOxr3mXNMmgg" value="1"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_ddeK4OYUEeGYZqnbU6eCYw" name="Values">
      <packagedElement xmi:type="uml:Class" xmi:id="_YflXwOYYEeGYZqnbU6eCYw" name="CS_InstanceValueEvaluation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_FlTI8OYhEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.Classifier;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.ClassifierList;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Debug;&#xD;
import fUML.Semantics.Classes.Kernel.DataValue;&#xD;
import fUML.Semantics.Classes.Kernel.EnumerationValue;&#xD;
import fUML.Semantics.Classes.Kernel.InstanceValueEvaluation;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.Classes.Kernel.StructuredValue;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Syntax.Classes.Kernel.DataType;&#xD;
import fUML.Syntax.Classes.Kernel.Enumeration;&#xD;
import fUML.Syntax.Classes.Kernel.EnumerationLiteral;&#xD;
import fUML.Syntax.Classes.Kernel.InstanceSpecification;&#xD;
import fUML.Syntax.Classes.Kernel.InstanceValue;&#xD;
import fUML.Syntax.Classes.Kernel.Slot;&#xD;
import fUML.Syntax.Classes.Kernel.SlotList;&#xD;
import fUML.Syntax.Classes.Kernel.ValueSpecification;&#xD;
import fUML.Syntax.Classes.Kernel.ValueSpecificationList;&#xD;
import fUML.Syntax.CommonBehaviors.BasicBehaviors.Behavior;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_4of8MOedEeGYZqnbU6eCYw">
          <body>Extends fUML semantics in the sense that when the instance specification is for an object which is not typed by a Behavior, a CS_Reference (to a CS_Object) is produced instead of a Reference (to an Object)</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_lQfecOYYEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-InstanceValueEvaluation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_n74GoOYYEeGYZqnbU6eCYw" name="evaluate" specification="_d-9xkOYYEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_93qu4OYgEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// If the instance specification is for an enumeration, then return the&#xD;
		// identified enumeration literal.&#xD;
		// If the instance specification is for a data type (but not a primitive&#xD;
		// value or an enumeration), then create a data value of the given data&#xD;
		// type.&#xD;
		// If the instance specification is for an object, then create an object&#xD;
		// at the current locus with the specified types.&#xD;
		// Set each feature of the created value to the result of evaluating the&#xD;
		// value specifications for the specified slot for the feature.&#xD;
		// Extends fUML semantics in the sense that when the instance specification&#xD;
		// is for an object which is not typed by a Behaviore, A CS_Reference (to a &#xD;
		// CS_Object) is produced instead of a Reference (to an Object)&#xD;
&#xD;
		// Debug.println(&quot;[evaluate] InstanceValueEvaluation...&quot;);&#xD;
&#xD;
		InstanceSpecification instance = ((InstanceValue) this.specification).instance;&#xD;
		ClassifierList types = instance.classifier;&#xD;
		Classifier myType = types.getValue(0);&#xD;
&#xD;
		Debug.println(&quot;[evaluate] type = &quot; + myType.name);&#xD;
&#xD;
		Value value;&#xD;
		if (instance instanceof EnumerationLiteral) {&#xD;
			// Debug.println(&quot;[evaluate] Type is an enumeration.&quot;);&#xD;
			EnumerationValue enumerationValue = new EnumerationValue();&#xD;
			enumerationValue.type = (Enumeration) myType;&#xD;
			enumerationValue.literal = (EnumerationLiteral) instance;&#xD;
			value = enumerationValue;&#xD;
		} &#xD;
		else {&#xD;
			StructuredValue structuredValue = null;&#xD;
&#xD;
			if (myType instanceof DataType) {&#xD;
				// Debug.println(&quot;[evaluate] Type is a data type.&quot;);&#xD;
				DataValue dataValue = new DataValue();&#xD;
				dataValue.type = (DataType) myType;&#xD;
				structuredValue = dataValue;&#xD;
			} &#xD;
			else {&#xD;
				Object_ object = null;&#xD;
				if (myType instanceof Behavior) {&#xD;
					// Debug.println(&quot;[evaluate] Type is a behavior.&quot;);&#xD;
					object = this.locus.factory.createExecution(&#xD;
							(Behavior) myType, null);&#xD;
				} &#xD;
				else {&#xD;
					// Debug.println(&quot;[evaluate] Type is a class.&quot;);&#xD;
					object = new CS_Object();&#xD;
					for (int i = 0; i &lt; types.size(); i++) {&#xD;
						Classifier type = types.getValue(i);&#xD;
						object.types.addValue((Class_) type);&#xD;
					}&#xD;
				}&#xD;
&#xD;
				this.locus.add(object);&#xD;
&#xD;
				Reference reference ;&#xD;
				if (object instanceof CS_Object) {&#xD;
					reference = new CS_Reference();&#xD;
					((CS_Reference)reference).compositeReferent = (CS_Object)object ;&#xD;
				}&#xD;
				else {&#xD;
					reference = new Reference() ;&#xD;
				}&#xD;
				reference.referent = object;&#xD;
				structuredValue = reference;&#xD;
			}&#xD;
&#xD;
			structuredValue.createFeatureValues();&#xD;
&#xD;
			// Debug.println(&quot;[evaluate] &quot; + instance.slot.size() +&#xD;
			// &quot; slot(s).&quot;);&#xD;
&#xD;
			SlotList instanceSlots = instance.slot;&#xD;
			for (int i = 0; i &lt; instanceSlots.size(); i++) {&#xD;
				Slot slot = instanceSlots.getValue(i);&#xD;
				ValueList values = new ValueList();&#xD;
&#xD;
				// Debug.println(&quot;[evaluate] feature = &quot; +&#xD;
				// slot.definingFeature.name + &quot;, &quot; + slot.value.size() +&#xD;
				// &quot; value(s).&quot;);&#xD;
				ValueSpecificationList slotValues = slot.value;&#xD;
				for (int j = 0; j &lt; slotValues.size(); j++) {&#xD;
					ValueSpecification slotValue = slotValues.getValue(j);&#xD;
					// Debug.println(&quot;[evaluate] Value = &quot; +&#xD;
					// slotValue.getClass().getName());&#xD;
					values.addValue(this.locus.executor.evaluate(slotValue));&#xD;
				}&#xD;
				structuredValue.setFeatureValue(slot.definingFeature, values, 0);&#xD;
			}&#xD;
&#xD;
			value = structuredValue;&#xD;
		}&#xD;
&#xD;
		return value;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_d-9xkOYYEeGYZqnbU6eCYw" name="evaluate" method="_n74GoOYYEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_7zDy0OYgEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_90nNMMEREeKkJbQgitQ3JQ" name="CS_OpaqueExpressionEvaluation">
        <generalization xmi:type="uml:Generalization" xmi:id="_0JzX8MEVEeKkJbQgitQ3JQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Evaluation"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_LiOzwsESEeKkJbQgitQ3JQ" name="evaluate" specification="_LiOzwMESEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LiOzw8ESEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Execute the behavior associated with the context OpaqueExpression, if any.&#xD;
		// If multiple return values are computed, then return the first one.&#xD;
		// If no value are computed, return null&#xD;
		ValueList evaluation = this.executeExpressionBehavior() ;&#xD;
		if (evaluation.size() > 0) {&#xD;
			return evaluation.get(0) ;&#xD;
		}&#xD;
		else {&#xD;
			return null ;&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_9xH3gMEVEeKkJbQgitQ3JQ" name="executeExpressionBehavior" specification="_itG3kMEVEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>		// If a behavior is associated with the context OpaqueExpression,&#xD;
		// then execute this behavior, and return computed values.&#xD;
		// Otherwise, return an empty list of values.&#xD;
		ValueList evaluation = new ValueList() ;&#xD;
		OpaqueExpression expression = (OpaqueExpression)this.specification ;&#xD;
		Behavior behavior = expression.behavior ;&#xD;
		if (behavior != null) {&#xD;
			ParameterValueList inputs = new ParameterValueList() ;&#xD;
			ParameterValueList results = this.locus.executor.execute(behavior, null, inputs) ;&#xD;
			for (int i = 0 ; i &lt; results.size() ; i++) { // results.size should be 1&#xD;
				ParameterValue parameterValue = results.get(i) ;&#xD;
				ValueList values = parameterValue.values ;&#xD;
				for (int j = 0 ; j &lt; values.size() ; j++) {&#xD;
					evaluation.add(values.get(j)) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return evaluation ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_LiOzwMESEeKkJbQgitQ3JQ" name="evaluate" method="_LiOzwsESEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LiOzwcESEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_itG3kMEVEeKkJbQgitQ3JQ" name="executeExpressionBehavior" method="_9xH3gMEVEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_oTWuYMEVEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rcC9oMEVEeKkJbQgitQ3JQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rcMuoMEVEeKkJbQgitQ3JQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_3NM98N-9EeGnO-TF_1T_iQ" name="Loci">
      <packageImport xmi:type="uml:PackageImport" xmi:id="_OQNUwND2EeWMvYElZ5Ee4w">
        <importedPackage xmi:type="uml:Package" href="fUML_Semantics.uml#Semantics-Loci"/>
      </packageImport>
      <packagedElement xmi:type="uml:Class" xmi:id="_ScbvYN--EeGnO-TF_1T_iQ" name="CS_ExecutionFactory">
        <ownedComment xmi:type="uml:Comment" xmi:id="_IYqJsOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Actions.CompleteActions.CS_ReadExtentActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Actions.IntermediateActions.CS_AddStructuralFeatureValueActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Actions.IntermediateActions.CS_CreateLinkActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Actions.IntermediateActions.CS_CreateObjectActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Actions.IntermediateActions.CS_ReadSelfActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.Classes.Kernel.CS_InstanceValueEvaluation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.InvocationActions.CS_AcceptEventActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.InvocationActions.CS_CallOperationActionActivation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.InvocationActions.CS_SendSignalActionActivation;&#xD;
import fUML.Semantics.Loci.LociL1.SemanticVisitor;&#xD;
import fUML.Semantics.Loci.LociL3.ExecutionFactoryL3;&#xD;
import fUML.Syntax.Actions.BasicActions.CallOperationAction;&#xD;
import fUML.Syntax.Actions.BasicActions.SendSignalAction;&#xD;
import fUML.Syntax.Actions.CompleteActions.AcceptEventAction;&#xD;
import fUML.Syntax.Actions.CompleteActions.ReadExtentAction;&#xD;
import fUML.Syntax.Actions.IntermediateActions.AddStructuralFeatureValueAction;&#xD;
import fUML.Syntax.Actions.IntermediateActions.CreateLinkAction;&#xD;
import fUML.Syntax.Actions.IntermediateActions.CreateObjectAction;&#xD;
import fUML.Syntax.Actions.IntermediateActions.ReadSelfAction;&#xD;
import fUML.Syntax.Classes.Kernel.Element;&#xD;
import fUML.Syntax.Classes.Kernel.InstanceValue;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_IkWKUOedEeGYZqnbU6eCYw">
          <body>Extends fUML semantics in the sense that newly introduced semantic visitors are instantiated instead of fUML visitors.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_vavRwN--EeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL3-ExecutionFactoryL3"/>
        </generalization>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_9_4-kMFdEeKkJbQgitQ3JQ" name="appliedProfiles" association="_9_4-k8FdEeKkJbQgitQ3JQ">
          <type xmi:type="uml:Class" href="../Syntax/UML.uml#Package"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9_4-kcFdEeKkJbQgitQ3JQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9_4-ksFdEeKkJbQgitQ3JQ" value="*"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_7hxIEOH6EeGD-8FkSWTrOg" name="instantiateVisitor" specification="_WWIk0N--EeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_7h4c0OH6EeGD-8FkSWTrOg" name="element">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Element"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7h65EOH6EeGD-8FkSWTrOg" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7h8HMOH6EeGD-8FkSWTrOg" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_7iEqEOH6EeGD-8FkSWTrOg" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticVisitor"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7iHGUOH6EeGD-8FkSWTrOg" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7iIUcOH6EeGD-8FkSWTrOg" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Extends fUML semantics in the sense that newly introduced &#xD;
		// semantic visitors are instantiated instead of fUML visitors&#xD;
&#xD;
		// Extends fUML semantics in the sense that newly introduced &#xD;
		// semantic visitors are instantiated instead of fUML visitors&#xD;
&#xD;
		SemanticVisitor visitor = null ;&#xD;
		if (element instanceof ReadExtentAction) {&#xD;
			visitor =new CS_ReadExtentActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof ReadIsClassifiedObjectAction) {&#xD;
			visitor = new CS_ReadIsClassifiedObjectActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof AddStructuralFeatureValueAction) {&#xD;
			visitor = new CS_AddStructuralFeatureValueActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof ClearStructuralFeatureAction) {&#xD;
			visitor = new CS_ClearStructuralFeatureValueActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof CreateLinkAction) {&#xD;
			visitor = new CS_CreateLinkActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof CreateObjectAction) {&#xD;
			visitor = new CS_CreateObjectActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof ReadSelfAction) {&#xD;
			visitor = new CS_ReadSelfActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof InstanceValue) {&#xD;
			visitor = new CS_InstanceValueEvaluation() ;&#xD;
		}&#xD;
		else if (element instanceof AcceptEventAction) {&#xD;
			visitor = new CS_AcceptEventActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof CallOperationAction) {&#xD;
			visitor = new CS_CallOperationActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof SendSignalAction) {&#xD;
			visitor = new CS_SendSignalActionActivation() ;&#xD;
		}&#xD;
		else if (element instanceof OpaqueExpression) {&#xD;
			visitor = new CS_OpaqueExpressionEvaluation() ;&#xD;
		}&#xD;
		else {&#xD;
			visitor = super.instantiateVisitor(element) ;&#xD;
		}&#xD;
		return visitor ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_WWIk0N--EeGnO-TF_1T_iQ" name="instantiateVisitor" visibility="public" method="_7hxIEOH6EeGD-8FkSWTrOg">
          <ownedComment xmi:type="uml:Comment" xmi:id="_7iJikOH6EeGD-8FkSWTrOg">
            <body>&lt;&lt;TextualRepresentation>>public instantiateVisitor (in element : Element ) : SemanticVisitor {
	// TODO
	return super.instantiateVisitor(element) ;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_7hzkUOH6EeGD-8FkSWTrOg" name="element">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Element"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7h1ZgOH6EeGD-8FkSWTrOg" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7h2noOH6EeGD-8FkSWTrOg" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_7h9VUOH6EeGD-8FkSWTrOg" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticVisitor"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_7h-jcOH6EeGD-8FkSWTrOg" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_7iBmwOH6EeGD-8FkSWTrOg" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_D4tBgMFdEeKkJbQgitQ3JQ" name="getStereotypeClass">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LBb-wMFdEeKkJbQgitQ3JQ" name="profileName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_NaFRIMFdEeKkJbQgitQ3JQ" name="stereotypeName">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_RVzf0MFdEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_EaLW4MFdEeKkJbQgitQ3JQ" name="getStereotypeApplication">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Xvha8MFdEeKkJbQgitQ3JQ" name="stereotype">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_afFYgMFdEeKkJbQgitQ3JQ" name="element">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Element"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_deZpUMFdEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_XUMGMOYZEeGYZqnbU6eCYw" name="CS_Executor">
        <ownedComment xmi:type="uml:Comment" xmi:id="_e1ezwOYhEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Reference;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Debug;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.ParameterValueList;&#xD;
import fUML.Semantics.Loci.LociL1.Executor;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_Tr3RUOedEeGYZqnbU6eCYw">
          <body>fUML semantics is extended in the sense that when the instantiated object is a CS_Object, a CS_Reference is returned (instead of a Reference). [Note: this can be avoided if fUML introduces a factory for Reference]</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_CntaoOYaEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-Executor"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_IANJUOYaEeGYZqnbU6eCYw" name="start" specification="_f0MYYOYZEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_PNeoUOYaEeGYZqnbU6eCYw" name="type">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QpBZQOYaEeGYZqnbU6eCYw" name="inputs">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-ParameterValue"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_YD-u8OYaEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_YEE1kOYaEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Rz8UQOYaEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Instantiate the given class and start any behavior of the resulting&#xD;
		// object.&#xD;
		// (The behavior of an object includes any classifier behaviors for an&#xD;
		// active object or the class of the object itself, if that is a&#xD;
		// behavior.)&#xD;
		// fUML semantics is extended in the sense that when the instantiated object&#xD;
		// is a CS_Object, a CS_Reference is returned (instead of a Reference)&#xD;
&#xD;
		Debug.println(&quot;[start] Starting &quot; + type.name + &quot;...&quot;);&#xD;
&#xD;
		Object_ object = this.locus.instantiate(type);&#xD;
&#xD;
		Debug.println(&quot;[start] Object = &quot; + object);&#xD;
		object.startBehavior(type, inputs);&#xD;
&#xD;
		Reference reference ;&#xD;
		if (object instanceof CS_Object) {&#xD;
			reference = new CS_Reference();&#xD;
			((CS_Reference)reference).compositeReferent = (CS_Object)object ;&#xD;
		}&#xD;
		else {&#xD;
			reference = new Reference() ;&#xD;
		}&#xD;
		reference.referent = object;&#xD;
&#xD;
		return reference;&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_f0MYYOYZEeGYZqnbU6eCYw" name="start" method="_IANJUOYaEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_kEaQYOYZEeGYZqnbU6eCYw" name="type">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_lLvE0OYZEeGYZqnbU6eCYw" name="inputs">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-ParameterValue"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_1sSGAOYZEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1sZawOYZEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mNRaUOYZEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_m8YmQOYdEeGYZqnbU6eCYw" name="CS_Locus">
        <ownedComment xmi:type="uml:Comment" xmi:id="_op7JUOYhEeGYZqnbU6eCYw">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Loci.LociL1.Locus;&#xD;
import fUML.Syntax.CommonBehaviors.BasicBehaviors.Behavior;&#xD;
</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_ex6_wOedEeGYZqnbU6eCYw">
          <body>Extends fUML semantics by instantiating a CS_Object in the case where type is not a Behavior. Otherwise behaves like in fUML.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_sXs_cOYdEeGYZqnbU6eCYw">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-Locus"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_I1dZgOYeEeGYZqnbU6eCYw" name="instantiate" specification="_v1ptAOYdEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ME-pgOYeEeGYZqnbU6eCYw" name="type">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Nen9AOYeEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Extends fUML semantics by instantiating a CS_Object&#xD;
		// in the case where type is not a Behavior.&#xD;
		// Otherwise behaves like in fUML&#xD;
&#xD;
		Object_ object = null;&#xD;
&#xD;
		if (type instanceof Behavior) {&#xD;
			object = super.instantiate(type);&#xD;
		} else {&#xD;
			object = new CS_Object() ;&#xD;
			object.types.addValue(type);&#xD;
			object.createFeatureValues();&#xD;
			this.add(object);&#xD;
		}&#xD;
&#xD;
		return object;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_v1ptAOYdEeGYZqnbU6eCYw" name="instantiate" method="_I1dZgOYeEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_3gsGEOYdEeGYZqnbU6eCYw" name="type">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_48xCgOYdEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_9_4-k8FdEeKkJbQgitQ3JQ" name="cS_ExecutionFactory_package_1" memberEnd="_9_4-lMFdEeKkJbQgitQ3JQ _9_4-kMFdEeKkJbQgitQ3JQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_9_4-lMFdEeKkJbQgitQ3JQ" name="cS_ExecutionFactory" type="_ScbvYN--EeGnO-TF_1T_iQ" association="_9_4-k8FdEeKkJbQgitQ3JQ">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9_4-lcFdEeKkJbQgitQ3JQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9_4-lsFdEeKkJbQgitQ3JQ" value="1"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_TPJywM98EeW1e7U-Wzl1ng" name="SimpleClassifiers">
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwzEN2JEeGnO-TF_1T_iQ" name="CS_SignalInstance">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzEd2JEeGnO-TF_1T_iQ">
          <body>CS_SignalInstance extends fUML SignalInstance with the ability to reference the specific interaction point on which it occured. This is introduced to address the following requirements R9 (&quot;Specifying one or more ports for an event implies that the event triggers the execution of an associated behavior only if the event was received via one of the specified ports.&quot;).</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="__njrAOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_InteractionPoint;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.CommonBehaviors.Communications.SignalInstance;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwzE92JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
        </generalization>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_wUwzFN2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ" association="_wUwzId2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzFd2JEeGnO-TF_1T_iQ">
            <body>The InteractionPoint on which this signal instance occured.</body>
          </ownedComment>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzFt2JEeGnO-TF_1T_iQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzF92JEeGnO-TF_1T_iQ" value="1"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwzGN2JEeGnO-TF_1T_iQ" name="copy" specification="_wUwzHN2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzGd2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzGt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzG92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Create a new signal instance with the same type, interaction point and feature values as this signal instance.&#xD;
		CS_SignalInstance newValue = (CS_SignalInstance) (super.copy());&#xD;
		newValue.type = this.type  ;&#xD;
		newValue.interactionPoint = this.interactionPoint ;&#xD;
		return newValue;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tr3l0BE6EeKT3tsL4v_Daw" name="new_" specification="_JQJXABE3EeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wwhCkBE6EeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Create a new signal instance with no type or feature values.&#xD;
		return new CS_SignalInstance();&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwzHN2JEeGnO-TF_1T_iQ" name="copy" visibility="public" method="_wUwzGN2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzHd2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public copy () : Value {&#xD;
	// Create a new signal instance with the same type, interaction point and feature values as this signal instance.&#xD;
	SignalInstanceWithPort newValue = (SignalInstanceWithPort) super.copy();&#xD;
	newValue.type = this.type  ;&#xD;
	newValue.interactionPoint = this.interactionPoint ;&#xD;
	return newValue;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzHt2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzH92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzIN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_JQJXABE3EeKT3tsL4v_Daw" name="new_" method="_tr3l0BE6EeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QLR9IBE3EeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_wUwzId2JEeGnO-TF_1T_iQ" name="A_signalInstanceWithPort_interactionPoint" memberEnd="_wUwzIt2JEeGnO-TF_1T_iQ _wUwzFN2JEeGnO-TF_1T_iQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_wUwzIt2JEeGnO-TF_1T_iQ" name="signalInstanceWithPort" type="_wUwzEN2JEeGnO-TF_1T_iQ" association="_wUwzId2JEeGnO-TF_1T_iQ">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzI92JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzJN2JEeGnO-TF_1T_iQ" value="1"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_YlZoMN2OEeGnO-TF_1T_iQ" name="StructuredClassifiers">
      <packagedElement xmi:type="uml:Class" xmi:id="_wUvk8d2JEeGnO-TF_1T_iQ" name="CS_InteractionPoint">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUvk8t2JEeGnO-TF_1T_iQ">
          <body>A CS_InteractionPoint represents the runtime manifestation of a Reference to an Object playing the role of a Port. More specifically, it overrides operation dispatching and signal receptions in order to capture the specific propagation semantics of requests targeting a port.&#xD;
NOTE: This class is related to the following requirements:&#xD;
- R1. The target value of an invocation action may also be a port. In this case, the invocation request is sent to the object owning this port as identified by the port identity, and is, upon arrival, handled as described in &quot;Port&quot; clause</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_FkrwwOH2EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Classes.Interfaces.Operation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.Port;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.Execution;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.ParameterValueList;&#xD;
import fUML.Semantics.CommonBehaviors.Communications.SignalInstance;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUvk-N2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
        </generalization>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_wUvk-d2JEeGnO-TF_1T_iQ" name="owner" type="_wUwMMt2JEeGnO-TF_1T_iQ" association="_wUwL0N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUvk-t2JEeGnO-TF_1T_iQ">
            <body>Represents the Reference to the CompositeObject owning this InteractionPort. NOTE: This is introduced to address requirement R3 (It represents the &quot;link from that instance to the instance of the owning classifier [...] through which communication is forwarded to the instance of the owning classifier or through which the owning classifier communicates)</body>
          </ownedComment>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUvk-92JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUvk_N2JEeGnO-TF_1T_iQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_wUvk_d2JEeGnO-TF_1T_iQ" name="definingPort" association="_wUwL1N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUvk_t2JEeGnO-TF_1T_iQ">
            <body>The Port for which this InteractionPoint is a runtime manifestation</body>
          </ownedComment>
          <type xmi:type="uml:Class" href="../Syntax/UML.uml#Port"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUvk_92JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUvlAN2JEeGnO-TF_1T_iQ" value="1"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUvlAd2JEeGnO-TF_1T_iQ" name="startBehavior" specification="_wUwLu92JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUvlAt2JEeGnO-TF_1T_iQ" name="classifier">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUvlA92JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUvlBN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUvlBd2JEeGnO-TF_1T_iQ" name="inputs">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-ParameterValue"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUvlBt2JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUvlB92JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>// Overriden to do nothing&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwLsN2JEeGnO-TF_1T_iQ" name="dispatch" specification="_wUwLw92JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLsd2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLst2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLs92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLtN2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLtd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLtt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Delegates dispatching to the owning object&#xD;
		return this.owner.dispatchIn(operation, this) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwLt92JEeGnO-TF_1T_iQ" name="send" specification="_wUwLy92JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLuN2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLud2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLut2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Delegates sending to the owning object&#xD;
		this.owner.sendIn(signalInstance, this) ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwLu92JEeGnO-TF_1T_iQ" name="startBehavior" visibility="public" method="_wUvlAd2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwLvN2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public startBehavior (in classifier : Class [0..1], &#xD;
                                     in inputs : ParameterValue [*]) { &#xD;
	// Overriden to do nothing&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLvd2JEeGnO-TF_1T_iQ" name="classifier">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Class"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLvt2JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLv92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLwN2JEeGnO-TF_1T_iQ" name="inputs">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-ParameterValue"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLwd2JEeGnO-TF_1T_iQ" value="-1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLwt2JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwLw92JEeGnO-TF_1T_iQ" name="dispatch" visibility="public" method="_wUwLsN2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwLxN2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public dispatch (in operation : Operation ) : Execution { 
	// Delegates dispatching to the owning object
	return this.owner.dispatchIn(operation, this) ;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLxd2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLxt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLx92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLyN2JEeGnO-TF_1T_iQ" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLyd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLyt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwLy92JEeGnO-TF_1T_iQ" name="send" visibility="public" method="_wUwLt92JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwLzN2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public send (in signalInstance : SignalInstance ) {&#xD;
	// Delegates sending to the owning object&#xD;
	this.owner.sendIn(signalInstance, this) ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwLzd2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwLzt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwLz92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_wUwL0N2JEeGnO-TF_1T_iQ" name="A_interactionPoint_owner" memberEnd="_wUwL0d2JEeGnO-TF_1T_iQ _wUvk-d2JEeGnO-TF_1T_iQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_wUwL0d2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ" association="_wUwL0N2JEeGnO-TF_1T_iQ">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwL0t2JEeGnO-TF_1T_iQ"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwL092JEeGnO-TF_1T_iQ" value="*"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_wUwL1N2JEeGnO-TF_1T_iQ" name="A_interactionPoint_definingPort" memberEnd="_wUwL1d2JEeGnO-TF_1T_iQ _wUvk_d2JEeGnO-TF_1T_iQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_wUwL1d2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ" association="_wUwL1N2JEeGnO-TF_1T_iQ">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwL1t2JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwL192JEeGnO-TF_1T_iQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_wUyA4N2JEeGnO-TF_1T_iQ" name="A_referenceToCompositeStructure_compositeReferent" memberEnd="_wUyA4d2JEeGnO-TF_1T_iQ _wUwyxN2JEeGnO-TF_1T_iQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_wUyA4d2JEeGnO-TF_1T_iQ" name="referenceToCompositeStructure" type="_wUwMMt2JEeGnO-TF_1T_iQ" association="_wUyA4N2JEeGnO-TF_1T_iQ">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUyA4t2JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUyA492JEeGnO-TF_1T_iQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUyA5N2JEeGnO-TF_1T_iQ" name="CS_Link">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUyA5d2JEeGnO-TF_1T_iQ">
          <body>CS_Link extends Link with the ability to specify that this association instance plays a particular Connector.&#xD;
NOTE: The execution model described in this specification makes the hypothesis that connectors are necessarily typed by an Association.</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_J8k-EOH2EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValue;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValueList;&#xD;
import fUML.Semantics.Classes.Kernel.Link;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUyA5t2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Link"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_lq_tYBE_EeKT3tsL4v_Daw" name="hasValueForAfeature" specification="_Vv7X0BE_EeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_utAgcBE_EeKT3tsL4v_Daw" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_vfcC8BE_EeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Returns true if the given value object is used as a value for a FeatureValue of this link&#xD;
		FeatureValueList allFeatureValues = this.getFeatureValues() ;&#xD;
		Integer i = 1 ;&#xD;
		boolean isAValue = false ;&#xD;
		while (i &lt;= allFeatureValues.size() &amp;&amp; !isAValue) {&#xD;
			FeatureValue featureValue = allFeatureValues.getValue(i-1);&#xD;
			isAValue = !featureValue.values.isEmpty() &amp;&amp; featureValue.values.getValue(0).equals(value) ;&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return isAValue ;&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JOGkcMFTEeKkJbQgitQ3JQ" name="getFeature" specification="_ztWYwMFSEeKkJbQgitQ3JQ">
          <language>Java</language>
          <body>FeatureValueList allFeatureValues = this.getFeatureValues() ;&#xD;
		Integer i = 1 ;&#xD;
		StructuralFeature feature = null ;&#xD;
		while (i &lt;= allFeatureValues.size() &amp;&amp; feature == null) {&#xD;
			FeatureValue featureValue = allFeatureValues.get(i-1);&#xD;
			if (!featureValue.values.isEmpty() &amp;&amp; featureValue.values.get(0).equals(value)) {&#xD;
				feature = featureValue.feature ;&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return feature ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Vv7X0BE_EeKT3tsL4v_Daw" name="hasValueForAFeature" method="_lq_tYBE_EeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_fp_0QBE_EeKT3tsL4v_Daw" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_imgosBE_EeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_ztWYwMFSEeKkJbQgitQ3JQ" name="getFeature" method="_JOGkcMFTEeKkJbQgitQ3JQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_6wlK8MFSEeKkJbQgitQ3JQ" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_9-VgYMFSEeKkJbQgitQ3JQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwzPd2JEeGnO-TF_1T_iQ" name="CS_Object">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzPt2JEeGnO-TF_1T_iQ">
          <body>CS_Object extends fUML Object with specific operations for managing propagations of requests through ports, from the environment to the internals of this object, or from the objet to its environment.&#xD;
NOTE, this class addresses the following requirements:&#xD;
- R4: If connectors are attached to both the port when used on a property within the internal structure of a classifier and the port on the container of an internal structure, the instance of the owning classifier will forward any requests arriving at this port along the link specified by those connectors.&#xD;
- R5: If there is a connector attached to only one side of a port, any requests arriving at this port will terminante at this port [Non-behavior port]&#xD;
- R6: For a behavior port, the instance of the owning classifier will handle requests arriving at this port (as specified in the behavior of the classifier), if this classifier has any behavior.&#xD;
- R7: If there is no behavior defined for this classifier, any communication arriving at a behavior port is lost.&#xD;
- R8: If several connectors are attached on one side of a port, then any request arriving at this port on a link derived from a connector on the other side of the port will be fowarded on links corresponding to these connectors. It is a semantic variation point whether these requests will be forwarded on all links, or on only one of those links.</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_Osfp0OH2EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CommonBehaviors.Communications.CS_DispatchOperationOfInterfaceStrategy;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CommonBehaviors.Communications.CS_StructuralFeatureOfInterfaceAccessStrategy;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.InvocationActions.CS_RequestPropagationStrategy;&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.InvocationActions.CS_SignalInstance;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Classes.Dependencies.NamedElement;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Classes.Interfaces.Operation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CommonBehaviors.Communications.Interface;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CommonBehaviors.Communications.InterfaceList;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Components.BasicComponents.ConnectorKind;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.InternalStructures.ClassifierList;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.Port;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.StructuredClasses.Class_;&#xD;
import fUML.Semantics.Actions.BasicActions.CallOperationActionActivation;&#xD;
import fUML.Semantics.Actions.BasicActions.SendSignalActionActivation;&#xD;
import fUML.Semantics.Classes.Kernel.ExtensionalValue;&#xD;
import fUML.Semantics.Classes.Kernel.ExtensionalValueList;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValue;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValueList;&#xD;
import fUML.Semantics.Classes.Kernel.Object_;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.Classes.Kernel.ReferenceList;&#xD;
import fUML.Semantics.Classes.Kernel.Value;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.Execution;&#xD;
import fUML.Semantics.CommonBehaviors.Communications.SignalInstance;&#xD;
import fUML.Semantics.Loci.LociL1.ChoiceStrategy;&#xD;
import fUML.Syntax.Classes.Kernel.NamedElementList;&#xD;
import fUML.Syntax.Classes.Kernel.StructuralFeature;&#xD;
import fUML.Syntax.Classes.Kernel.Type;&#xD;
import fUML.Syntax.Classes.Kernel.TypeList;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.Reception;&#xD;
import fUML.Syntax.CommonBehaviors.Communications.Signal;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwzUt2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwzV92JEeGnO-TF_1T_iQ" name="dispatchIn" specification="_wUxaFd2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzWN2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzWd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzWt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzW92JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ0N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ0d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ0t2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ092JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ1N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// If the interaction point refers to a behavior port, does nothing [for the moment... ?], &#xD;
		// since the only kind of event supported in fUML is SignalEvent&#xD;
		// If it does not refer to a behavior port, select appropriate delegation links &#xD;
		// from interactionPoint, and propagates the operation call through &#xD;
		// these links&#xD;
		Execution execution = null ;&#xD;
		if (interactionPoint.definingPort.isBehavior) {&#xD;
			// Do nothing&#xD;
		}&#xD;
		else {&#xD;
			boolean operationIsProvided = true ;&#xD;
			ReferenceList potentialTargets = new ReferenceList() ;&#xD;
			CS_LinkList cddLinks = this.getLinks(interactionPoint) ;&#xD;
			Integer linkIndex = 1 ;&#xD;
			while (linkIndex &lt;= cddLinks.size()) {&#xD;
				ReferenceList validTargets = this.selectTargetsForDispatching(cddLinks.getValue(linkIndex - 1), &#xD;
						interactionPoint, ConnectorKind.delegation, operation, operationIsProvided) ;&#xD;
				Integer targetIndex = 1 ;&#xD;
				while(targetIndex &lt;= validTargets.size()) {&#xD;
					potentialTargets.add(validTargets.getValue(targetIndex-1)) ;&#xD;
					targetIndex = targetIndex + 1 ;&#xD;
				}&#xD;
				linkIndex = linkIndex + 1 ;&#xD;
			}&#xD;
			// If potentialTargets is empty, no delegation target have been found, &#xD;
			// and the operation call will be lost&#xD;
			if (! (potentialTargets.size()==0)) {&#xD;
				CS_RequestPropagationStrategy strategy =&#xD;
						(CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
				// Choose one target non-deterministically&#xD;
				ReferenceList targets = strategy.select(potentialTargets, new CallOperationActionActivation()) ;&#xD;
				Reference target = targets.getValue(0) ;&#xD;
				execution = target.dispatch(operation) ;&#xD;
			}&#xD;
		}&#xD;
		return execution ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUxZ1d2JEeGnO-TF_1T_iQ" name="sendIn" specification="_wUxaIN2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ1t2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ192JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ2N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ2d2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ2t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ292JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// If the interaction is a behavior port, &#xD;
		// creates a CS_SignalInstance from the signal instance,&#xD;
		// sets its interaction point,&#xD;
		// and sends it to the target object using operation send&#xD;
		// If this is not a behavior port, &#xD;
		// select appropriate delegation targets from interactionPoint, &#xD;
		// and propagates the signal to these targets&#xD;
		if (interactionPoint.definingPort.isBehavior) {&#xD;
			CS_SignalInstance newSignalInstance = (CS_SignalInstance)signalInstance.copy() ;&#xD;
			newSignalInstance.interactionPoint = interactionPoint ;&#xD;
			this.send(newSignalInstance) ;&#xD;
		}&#xD;
		else {&#xD;
			boolean receptionIsProvided = true ;&#xD;
			ReferenceList potentialTargets = new ReferenceList() ;&#xD;
			CS_LinkList cddLinks = this.getLinks(interactionPoint) ;&#xD;
			Integer linkIndex = 1 ;&#xD;
			while (linkIndex &lt;= cddLinks.size()) {&#xD;
				ReferenceList validTargets = this.selectTargetsForSending(cddLinks.getValue(linkIndex - 1), &#xD;
						interactionPoint, ConnectorKind.delegation, signalInstance.type, receptionIsProvided) ;&#xD;
				Integer targetIndex = 1 ;&#xD;
				while(targetIndex &lt;= validTargets.size()) {&#xD;
					potentialTargets.add(validTargets.getValue(targetIndex-1)) ;&#xD;
					targetIndex = targetIndex + 1 ;&#xD;
				}&#xD;
				linkIndex = linkIndex + 1 ;&#xD;
			}&#xD;
			// If potential targets is empty, no delegation target has been found, &#xD;
			// and the signal is lost&#xD;
			// Otherwise, do the following concurrently&#xD;
			for (int i = 0 ; i &lt; potentialTargets.size() ; i++) {&#xD;
				Reference target = potentialTargets.getValue(i) ;&#xD;
				CS_SignalInstance newSignalInstance = (CS_SignalInstance)signalInstance.copy() ;&#xD;
				newSignalInstance.interactionPoint = interactionPoint ;&#xD;
				target.send(newSignalInstance) ;&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUxZ3N2JEeGnO-TF_1T_iQ" name="selectTargetsForSending" specification="_wUxaKN2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_iK0jgBFFEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ4N2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ4d2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ4t2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_VENSkBFFEeKT3tsL4v_Daw" name="connectorKind"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ3d2JEeGnO-TF_1T_iQ" name="signal">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Signal"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ3t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ392JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_MJrLsOdwEeGYZqnbU6eCYw" name="isProvided">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ492JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ5N2JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ5d2JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// From the given link, signal and interaction point, retrieves potential targets (i.e. end values of link) &#xD;
		// through which request can be propagated&#xD;
		// These targets are attached to interaction point through the given link, and respect the following rules:&#xD;
		// - if toInternal is true, connectorKind must be Delegation, the given link has to target the internals of this CS_Object&#xD;
		// - if toInternal is false, the given link has to target the environment of this CS_Object.&#xD;
		ReferenceList potentialTargets = new ReferenceList() ;&#xD;
		if (toInternal &amp;&amp; connectorKind == ConnectorKind.delegation) {&#xD;
			if (this.getLinkKind(link, interactionPoint) == CS_LinkKind.ToInternal) {&#xD;
				Integer i = 1 ;&#xD;
				while(i &lt;= link.getFeatureValues().size()) {&#xD;
					ValueList values = link.getFeatureValues().get(i-1).values ;&#xD;
					if (!values.isEmpty()) {&#xD;
						Integer j = 1 ;&#xD;
						while (j &lt;= values.size()) {&#xD;
							Reference cddTarget = (Reference)values.get(j-1) ;&#xD;
							if (!cddTarget.equals(interactionPoint)) {&#xD;
								potentialTargets.add(cddTarget) ;&#xD;
							}&#xD;
							j = j + 1 ;&#xD;
						}&#xD;
					}&#xD;
					i = i + 1 ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		else { // to Environment&#xD;
			if (this.getLinkKind(link, interactionPoint) == CS_LinkKind.ToEnvironment) {&#xD;
				Integer i = 1 ;&#xD;
				while(i &lt;= link.getFeatureValues().size()) {&#xD;
					ValueList values = link.getFeatureValues().get(i-1).values ;&#xD;
					if (!values.isEmpty() &amp;&amp; values.get(0) instanceof Reference) {&#xD;
						Reference cddTarget = (Reference)values.get(0) ;&#xD;
						if (connectorKind == ConnectorKind.assembly) {&#xD;
							if (! (cddTarget instanceof CS_InteractionPoint)) { // This is an assembly link&#xD;
								potentialTargets.add(cddTarget) ;&#xD;
							}&#xD;
							else {&#xD;
								// This is an assembly if the interaction point is not a feature value &#xD;
								// for a container of this CS_Object&#xD;
								CS_ObjectList directContainers = this.getDirectContainers() ;&#xD;
								boolean isAssembly = true ;&#xD;
								Integer j = 1 ;&#xD;
								if (! this.hasValueForAFeature(cddTarget)) {&#xD;
									while (isAssembly &amp;&amp; j &lt;= directContainers.size()) {&#xD;
										CS_Object container = directContainers.get(j - 1) ;&#xD;
										if (container.hasValueForAFeature(cddTarget)) {&#xD;
											isAssembly = false ;&#xD;
										}&#xD;
										j++ ;&#xD;
									}&#xD;
								}&#xD;
								else {&#xD;
									isAssembly = false ;&#xD;
								}&#xD;
								if (isAssembly) {&#xD;
									potentialTargets.add(cddTarget) ;&#xD;
								}&#xD;
							}&#xD;
						}&#xD;
						else { // delegation&#xD;
							// This is a delegation if the target is an interaction point&#xD;
							// and if this interaction is a feature value for a container of this CS_Object&#xD;
							if (cddTarget instanceof CS_InteractionPoint) {&#xD;
								CS_ObjectList directContainers = this.getDirectContainers() ;&#xD;
								boolean isDelegation = false ;&#xD;
								Integer j = 1 ;&#xD;
								while (!isDelegation &amp;&amp; j &lt;= directContainers.size()) {&#xD;
									CS_Object container = directContainers.get(j - 1) ;&#xD;
									if (container.hasValueForAFeature(cddTarget)) {&#xD;
										isDelegation = true ;&#xD;
									}&#xD;
									j++ ;&#xD;
								}&#xD;
								if (isDelegation) {&#xD;
									potentialTargets.add(cddTarget) ;&#xD;
								}&#xD;
							}&#xD;
						}&#xD;
					}&#xD;
					i = i + 1 ;&#xD;
				}&#xD;
			}&#xD;
		} &#xD;
		return potentialTargets ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUxZ8N2JEeGnO-TF_1T_iQ" name="selectTargetsForDispatching" specification="_wUxaPt2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hcqScBFEEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ9N2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ9d2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ9t2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dMmLcBFEEeKT3tsL4v_Daw" name="connectorKind"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ8d2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ8t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ892JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_vLiWgOdxEeGYZqnbU6eCYw" name="isProvided">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ992JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ-N2JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ-d2JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// From the given link, operation and interaction point, retrieves potential targets (i.e. end values of link) &#xD;
		// through which request can be propagated&#xD;
		// These targets are attached to interaction point through the given link, and respect the following rules:&#xD;
		// - if toInternal is true, connectorKind must be Delegation, the given link has to target the internals of this CS_Object, &#xD;
		// and a valid target must provide the Operation &#xD;
		// - if toInternal is false, the given link has to target the environment of this CS_Object.&#xD;
		//		- if connectorKind is assembly, a valid target has to provide the operation&#xD;
		// 		- if connectorKind is delegation, a valid target has to require the operation&#xD;
		ReferenceList potentialTargets = new ReferenceList() ;&#xD;
		if (toInternal &amp;&amp; connectorKind == ConnectorKind.delegation) {&#xD;
			if (this.getLinkKind(link, interactionPoint) == CS_LinkKind.ToInternal) {&#xD;
				Integer i = 1 ;&#xD;
				while(i &lt;= link.getFeatureValues().size()) {&#xD;
					ValueList values = link.getFeatureValues().get(i-1).values ;&#xD;
					if (!values.isEmpty() &amp;&amp; values.get(0) instanceof Reference) {&#xD;
						Reference cddTarget = (Reference)values.get(0) ;&#xD;
						if (cddTarget != interactionPoint &amp;&amp; this.isOperationProvided(cddTarget, operation)) {&#xD;
							potentialTargets.add(cddTarget) ;&#xD;
						}&#xD;
					}&#xD;
					i = i + 1 ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		else { // to environment&#xD;
			if (this.getLinkKind(link, interactionPoint) == CS_LinkKind.ToEnvironment) {&#xD;
				Integer i = 1 ;&#xD;
				while(i &lt;= link.getFeatureValues().size()) {&#xD;
					ValueList values = link.getFeatureValues().get(i-1).values ;&#xD;
					if (!values.isEmpty() &amp;&amp; values.get(0) instanceof Reference) {&#xD;
						Reference cddTarget = (Reference)values.get(0) ;&#xD;
						if (connectorKind == ConnectorKind.assembly) {&#xD;
							if (! (cddTarget instanceof CS_InteractionPoint)) { // This is an assembly link&#xD;
								if (this.isOperationProvided(cddTarget, operation)) {&#xD;
									potentialTargets.add(cddTarget) ;&#xD;
								}&#xD;
							}&#xD;
							else {&#xD;
								// This is an assembly if the interaction point is not a feature value &#xD;
								// for a container of this CS_Object&#xD;
								CS_ObjectList directContainers = this.getDirectContainers() ;&#xD;
								boolean isAssembly = true ;&#xD;
								Integer j = 1 ;&#xD;
								if (! this.hasValueForAFeature(cddTarget)) {&#xD;
									while (isAssembly &amp;&amp; j &lt;= directContainers.size()) {&#xD;
										CS_Object container = directContainers.get(j - 1) ;&#xD;
										if (container.hasValueForAFeature(cddTarget)) {&#xD;
											isAssembly = false ;&#xD;
										}&#xD;
										j++ ;&#xD;
									}&#xD;
								}&#xD;
								else {&#xD;
									isAssembly = false ;&#xD;
								}&#xD;
								if (isAssembly) {&#xD;
									if (this.isOperationProvided(cddTarget, operation)) {&#xD;
										potentialTargets.add(cddTarget) ;&#xD;
									}&#xD;
								}&#xD;
							}&#xD;
						}&#xD;
						else { // delegation&#xD;
							// This is a delegation if the target is an interaction point&#xD;
							// and if this interaction is a feature value for a container of this CS_Object&#xD;
							if (cddTarget instanceof CS_InteractionPoint) {&#xD;
								CS_ObjectList directContainers = this.getDirectContainers() ;&#xD;
								boolean isDelegation = false ;&#xD;
								Integer j = 1 ;&#xD;
								while (!isDelegation &amp;&amp; j &lt;= directContainers.size()) {&#xD;
									CS_Object container = directContainers.get(j - 1) ;&#xD;
									if (container.hasValueForAFeature(cddTarget)) {&#xD;
										isDelegation = true ;&#xD;
									}&#xD;
									j++ ;&#xD;
								}&#xD;
								if (isDelegation) {&#xD;
									if (this.isOperationRequired(cddTarget, operation)) {&#xD;
										potentialTargets.add(cddTarget) ;&#xD;
									}&#xD;
								}&#xD;
							}&#xD;
						}&#xD;
					}&#xD;
					i = i + 1 ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return potentialTargets ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUxZ-t2JEeGnO-TF_1T_iQ" name="sendOut" specification="_wUxaVN2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ-92JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ_N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxZ_d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxZ_t2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxZ_92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaAN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Select appropriate delegation links from interactionPoint, &#xD;
		// and propagates the signal instance through these links&#xD;
		// Appropriate links are links which target elements&#xD;
		// in the environment of this CS_Object.&#xD;
		// These can be delegation links (i.e, the targeted elements must&#xD;
		// require a reception for the signal) or assembly links (i.e., the target elements&#xD;
		// must provide a reception for the signal)&#xD;
&#xD;
		boolean receptionIsNotProvided = false ; // i.e. it is required&#xD;
		ReferenceList allPotentialTargets = new ReferenceList() ;&#xD;
		ReferenceList targetsForSendingIn = new ReferenceList() ;&#xD;
		ReferenceList targetsForSendingOut = new ReferenceList() ;&#xD;
&#xD;
		CS_LinkList cddLinks = this.getLinks(interactionPoint) ;&#xD;
		Integer linkIndex = 1 ;&#xD;
		while (linkIndex &lt;= cddLinks.size()) {&#xD;
			ReferenceList validAssemblyTargets = this.selectTargetsForSending(cddLinks.getValue(linkIndex - 1), &#xD;
					interactionPoint, ConnectorKind.assembly, signalInstance.type, receptionIsNotProvided) ;&#xD;
			Integer targetIndex = 1 ;&#xD;
			while(targetIndex &lt;= validAssemblyTargets.size()) {&#xD;
				allPotentialTargets.addValue(validAssemblyTargets.getValue(targetIndex-1)) ;&#xD;
				targetsForSendingIn.addValue(validAssemblyTargets.getValue(targetIndex-1)) ;&#xD;
				targetIndex = targetIndex + 1 ;&#xD;
			}&#xD;
			ReferenceList validDelegationTargets = this.selectTargetsForSending(cddLinks.getValue(linkIndex - 1), &#xD;
					interactionPoint, ConnectorKind.delegation, signalInstance.type, receptionIsNotProvided) ;&#xD;
			targetIndex = 1 ;&#xD;
			while(targetIndex &lt;= validDelegationTargets.size()) {&#xD;
				allPotentialTargets.addValue(validDelegationTargets.getValue(targetIndex-1)) ;&#xD;
				targetsForSendingOut.addValue(validDelegationTargets.getValue(targetIndex-1)) ;&#xD;
				targetIndex = targetIndex + 1 ;&#xD;
			}&#xD;
			linkIndex = linkIndex + 1 ;&#xD;
		}&#xD;
&#xD;
		CS_RequestPropagationStrategy strategy = (CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
		ReferenceList selectedTargets = strategy.select(allPotentialTargets, new SendSignalActionActivation()) ;&#xD;
&#xD;
		for (int j = 0 ; j &lt; selectedTargets.size() ; j++) {&#xD;
			Reference target = selectedTargets.getValue(j) ;&#xD;
			for (int k = 0 ; k &lt; targetsForSendingIn.size() ; k++) {&#xD;
				Reference cddTarget = targetsForSendingIn.getValue(k) ;&#xD;
				if (cddTarget == target) {&#xD;
					target.send(signalInstance) ;&#xD;
				}&#xD;
			}&#xD;
			for (int k = 0 ; k &lt; targetsForSendingOut.size() ; k++) {&#xD;
				// The target must be an interaction point&#xD;
				// i.e. a delegation connector for a required reception can only target a port&#xD;
				CS_InteractionPoint cddTarget = (CS_InteractionPoint)targetsForSendingOut.getValue(k) ;&#xD;
				if (cddTarget == target) {&#xD;
					CS_Reference owner = cddTarget.owner ;&#xD;
					owner.sendOut(signalInstance, cddTarget) ;&#xD;
				}&#xD;
			}&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUxaAd2JEeGnO-TF_1T_iQ" name="dispatchOut" specification="_wUxaXN2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaAt2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaA92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaBN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaBd2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaBt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaB92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaCN2JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaCd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaCt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Select appropriate delegation links from interactionPoint, &#xD;
		// and propagates the operation call through these links&#xD;
		// Appropriate links are either links which target elements&#xD;
		// in the environment of this CS_Object.&#xD;
		// These can be delegation links (i.e, the targeted elements must&#xD;
		// require the operation) or assembly links (i.e., the target elements&#xD;
		// must provide the operation)&#xD;
&#xD;
&#xD;
		Execution execution = null ;&#xD;
&#xD;
		boolean operationIsNotProvided = false ; // i.e. it is required&#xD;
		ReferenceList allPotentialTargets = new ReferenceList() ;&#xD;
		ReferenceList targetsForDispatchingIn = new ReferenceList() ;&#xD;
		ReferenceList targetsForDispatchingOut = new ReferenceList() ;&#xD;
&#xD;
		CS_LinkList cddLinks = this.getLinks(interactionPoint) ;&#xD;
		Integer linkIndex = 1 ;&#xD;
		while (linkIndex &lt;= cddLinks.size()) {&#xD;
			ReferenceList validAssemblyTargets = this.selectTargetsForDispatching(cddLinks.getValue(linkIndex - 1), &#xD;
					interactionPoint, ConnectorKind.assembly, operation, operationIsNotProvided) ;&#xD;
			Integer targetIndex = 1 ;&#xD;
			while(targetIndex &lt;= validAssemblyTargets.size()) {&#xD;
				allPotentialTargets.addValue(validAssemblyTargets.getValue(targetIndex-1)) ;&#xD;
				targetsForDispatchingIn.addValue(validAssemblyTargets.getValue(targetIndex-1)) ;&#xD;
				targetIndex = targetIndex + 1 ;&#xD;
			}&#xD;
			ReferenceList validDelegationTargets = this.selectTargetsForDispatching(cddLinks.getValue(linkIndex - 1), &#xD;
					interactionPoint, ConnectorKind.delegation, operation, operationIsNotProvided) ;&#xD;
			targetIndex = 1 ;&#xD;
			while(targetIndex &lt;= validDelegationTargets.size()) {&#xD;
				allPotentialTargets.addValue(validDelegationTargets.getValue(targetIndex-1)) ;&#xD;
				targetsForDispatchingOut.addValue(validDelegationTargets.getValue(targetIndex-1)) ;&#xD;
				targetIndex = targetIndex + 1 ;&#xD;
			}&#xD;
			linkIndex = linkIndex + 1 ;&#xD;
		}&#xD;
&#xD;
		CS_RequestPropagationStrategy strategy = (CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
		ReferenceList selectedTargets = strategy.select(allPotentialTargets, new SendSignalActionActivation()) ;&#xD;
&#xD;
		for (int j = 0 ; j &lt; selectedTargets.size() ; j++) {&#xD;
			Reference target = selectedTargets.getValue(j) ;&#xD;
			for (int k = 0 ; k &lt; targetsForDispatchingIn.size() &amp;&amp; execution == null ; k++) {&#xD;
				Reference cddTarget = targetsForDispatchingIn.getValue(k) ;&#xD;
				if (cddTarget == target) {&#xD;
					execution = target.dispatch(operation) ;&#xD;
				}&#xD;
			}&#xD;
			for (int k = 0 ; k &lt; targetsForDispatchingOut.size() &amp;&amp; execution == null ; k++) {&#xD;
				// The target must be an interaction point&#xD;
				// i.e. a delegation connector for a required operation can only target a port&#xD;
				CS_InteractionPoint cddTarget = (CS_InteractionPoint)targetsForDispatchingOut.getValue(k) ;&#xD;
				if (cddTarget == target) {&#xD;
					CS_Reference owner = cddTarget.owner ;&#xD;
					execution = owner.dispatchOut(operation, cddTarget) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return execution ;&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_mFIkUOVQEeGVLZOJyKihvQ" name="getFeatureValue" specification="_QimP8OVQEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_pH38kOVQEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_qdZlEOVQEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-FeatureValue"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// In the case where the feature belongs to an Interface,&#xD;
		// fUML semantics is extended in the sense that reading is &#xD;
		// delegated to a CS_StructuralFeatureOfInterfaceAccessStrategy&#xD;
		if (feature.namespace instanceof Interface) {&#xD;
			CS_StructuralFeatureOfInterfaceAccessStrategy readStrategy = &#xD;
					(CS_StructuralFeatureOfInterfaceAccessStrategy)this.locus.factory.getStrategy(&quot;structuralFeature&quot;) ;&#xD;
			return readStrategy.read(this, feature) ;&#xD;
		}&#xD;
		else {&#xD;
			return super.getFeatureValue(feature);&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_9gg9wOVdEeGVLZOJyKihvQ" name="setFeatureValue" specification="_b4W7YOVdEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_PII7wOVeEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_QWpWQOVeEeGVLZOJyKihvQ" name="values">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_aeRtkOVeEeGVLZOJyKihvQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_aeV_AOVeEeGVLZOJyKihvQ" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Rtw6MOVeEeGVLZOJyKihvQ" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// In the case where the feature belongs to an Interface,&#xD;
		// fUML semantics is extended in the sense that writing is &#xD;
		// delegated to a CS_StructuralFeatureOfInterfaceAccessStrategy&#xD;
		if (feature.namespace instanceof Interface) {&#xD;
			CS_StructuralFeatureOfInterfaceAccessStrategy writeStrategy = &#xD;
					(CS_StructuralFeatureOfInterfaceAccessStrategy)this.locus.factory.getStrategy(&quot;structuralFeature&quot;) ;&#xD;
			writeStrategy.write(this, feature, values, position) ;&#xD;
		}&#xD;
		else {&#xD;
			super.setFeatureValue(feature, values, position);&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_NNQoQOdzEeGYZqnbU6eCYw" name="contains" specification="_9z3cYOdyEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Qb-nAOdzEeGYZqnbU6eCYw" name="object">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_SWS-oOdzEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Determines if the object given as a parameter is directly&#xD;
		// or indirectly contained by this CS_Object&#xD;
		boolean objectIsContained = this.directlyContains(object) ;&#xD;
		// if object is not directly contained, restart the research&#xD;
		// recursively on the objects owned by this CS_Object&#xD;
		for (int i = 0 ; i &lt; this.featureValues.size() &amp;&amp; !objectIsContained ; i++) {&#xD;
			FeatureValue featureValue = this.featureValues.getValue(i) ;&#xD;
			ValueList values = featureValue.values ;&#xD;
			for (int j = 0 ; j &lt; values.size() &amp;&amp; !objectIsContained ; j++) {&#xD;
				Value value = values.getValue(j) ;&#xD;
				if (value instanceof CS_Object) {&#xD;
					objectIsContained = ((CS_Object)value).contains(object) ;&#xD;
				}&#xD;
				else if (value instanceof CS_Reference) {&#xD;
					CS_Object referent = ((CS_Reference)value).compositeReferent ;&#xD;
					objectIsContained = referent.contains(object) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return objectIsContained;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_EA5J4Od0EeGYZqnbU6eCYw" name="directlyContains" specification="_u98UgOdzEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_HzKhoOd0EeGYZqnbU6eCYw" name="object">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_JY1e8Od0EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Determines if the object given as a parameter is directly&#xD;
		// contained by this CS_Object&#xD;
		boolean objectIsContained = false ;&#xD;
		for (int i = 0 ; i &lt; this.featureValues.size() &amp;&amp; !objectIsContained ; i++) {&#xD;
			FeatureValue featureValue = this.featureValues.getValue(i) ;&#xD;
			ValueList values = featureValue.values ;&#xD;
			for (int j = 0 ; j &lt; values.size() &amp;&amp; !objectIsContained ; j++) {&#xD;
				Value value = values.getValue(j) ;&#xD;
				if (value == object) {&#xD;
					objectIsContained = true ;&#xD;
				}&#xD;
				else if (value instanceof CS_Reference) {&#xD;
					objectIsContained = (((CS_Reference)value).referent == object) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return objectIsContained;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_-R5xUOd0EeGYZqnbU6eCYw" name="getDirectContainers" specification="_uyYIQOd0EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_El4Q0Od1EeGYZqnbU6eCYw" name="result" type="_wUwzPd2JEeGnO-TF_1T_iQ" direction="return">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_GoNU8Od1EeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_GoRmYOd1EeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Retrieves all the extensional values at this locus which are direct&#xD;
		// containers for this CS_Object&#xD;
		// An extensional value is a direct container for an object if:&#xD;
		// - it is a CS_Object&#xD;
		// - it directly contains this object (i.e. CS_Object.directlyContains(Object)==true)&#xD;
		CS_ObjectList containers = new CS_ObjectList() ;&#xD;
		for (int i = 0 ; i &lt; this.locus.extensionalValues.size() ; i++) {&#xD;
			ExtensionalValue extensionalValue = this.locus.extensionalValues.getValue(i) ;&#xD;
			if (extensionalValue != this &amp;&amp; extensionalValue instanceof CS_Object) {&#xD;
				CS_Object cddContainer = (CS_Object)extensionalValue ;&#xD;
				if (cddContainer.directlyContains(this)) {&#xD;
					containers.add(cddContainer) ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		return containers ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_HdeTkOd2EeGYZqnbU6eCYw" name="isOperationProvided" specification="_daYsQOd1EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_UNg3kOd2EeGYZqnbU6eCYw" name="reference">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_VxhoAOd2EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_XRXqIOd2EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Determines if the given reference provides the operation&#xD;
		// If the reference is an interaction point, it provides the operation if this operation&#xD;
		// is a member of one of its provided interfaces&#xD;
		// If the reference is NOT an interactionPoint, it provides this operation if this operation is&#xD;
		// an operation of one of its type, or one of its type provides a realization for this operation (in the case&#xD;
		// where the namespace of this Operation is an interface)&#xD;
		boolean isProvided = false ;&#xD;
		if (reference instanceof CS_InteractionPoint) {&#xD;
			if (operation.owner instanceof Interface) {&#xD;
				// We have to look in provided interfaces of the port if &#xD;
				// they define directly or indirectly the Operation&#xD;
				Integer interfaceIndex = 1 ;&#xD;
				// Iterates on provided interfaces of the port&#xD;
				InterfaceList providedInterfaces = ((CS_InteractionPoint)reference).definingPort.provided() ;&#xD;
				while (interfaceIndex &lt;= providedInterfaces.size() &amp;&amp; !isProvided) {&#xD;
					Interface interface_ = providedInterfaces.getValue(interfaceIndex-1) ;&#xD;
					// Iterates on members of the current Interface&#xD;
					Integer memberIndex = 1 ;&#xD;
					while (memberIndex &lt;= interface_.member.size() &amp;&amp; !isProvided) {&#xD;
						NamedElement cddOperation = interface_.member.getValue(memberIndex-1) ;&#xD;
						if (cddOperation instanceof Operation) {&#xD;
							isProvided = operation == cddOperation ;&#xD;
						}&#xD;
						memberIndex = memberIndex + 1 ;&#xD;
					}&#xD;
					interfaceIndex = interfaceIndex + 1 ;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		else {&#xD;
			// We have to look if one of the Classifiers typing this reference &#xD;
			// directly or indirectly provides this operation&#xD;
			ClassifierList types = reference.getTypes() ;&#xD;
			Integer typeIndex = 1 ;&#xD;
			while (typeIndex &lt;= types.size() &amp;&amp; !isProvided) {&#xD;
				if (types.getValue(typeIndex - 1) instanceof Class_) {&#xD;
					Integer memberIndex = 1 ;&#xD;
					NamedElementList members = ((Class_)types.getValue(typeIndex - 1)).member ; &#xD;
					while (memberIndex &lt;= members.size() &amp;&amp; !isProvided) {&#xD;
						NamedElement cddOperation = members.getValue(memberIndex-1) ;&#xD;
						if (cddOperation instanceof Operation) {&#xD;
							CS_DispatchOperationOfInterfaceStrategy strategy = new CS_DispatchOperationOfInterfaceStrategy() ;&#xD;
							isProvided = strategy.operationsMatch((Operation)cddOperation, operation) ;&#xD;
						}&#xD;
						memberIndex = memberIndex + 1 ;&#xD;
					}&#xD;
				}&#xD;
				typeIndex = typeIndex + 1 ;&#xD;
			}&#xD;
		}&#xD;
		return isProvided ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_FD5iMOd4EeGYZqnbU6eCYw" name="isOperationRequired" specification="_o8fyoOd3EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_LekfkOd4EeGYZqnbU6eCYw" name="reference">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_NEIvMOd4EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Om6wkOd4EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Determines if the given reference requires the operation&#xD;
		// If the reference is an interaction point, it requires the operation if this operation&#xD;
		// is a member of one of its required interfaces&#xD;
		// If the reference is not a interaction point, it cannot require an operation&#xD;
		boolean matches = false ;&#xD;
		if (reference instanceof CS_InteractionPoint) {&#xD;
			Integer interfaceIndex = 1 ;&#xD;
			// Iterates on provided interfaces of the port&#xD;
			InterfaceList requiredInterfaces = ((CS_InteractionPoint)reference).definingPort.required() ;&#xD;
			while (interfaceIndex &lt;= requiredInterfaces.size() &amp;&amp; !matches) {&#xD;
				Interface interface_ = requiredInterfaces.getValue(interfaceIndex-1) ;&#xD;
				// Iterates on members of the current Interface&#xD;
				Integer memberIndex = 1 ;&#xD;
				while (memberIndex &lt;= interface_.member.size() &amp;&amp; !matches) {&#xD;
					NamedElement cddOperation = interface_.member.getValue(memberIndex-1) ;&#xD;
					if (cddOperation instanceof Operation) {&#xD;
						matches = operation == cddOperation ;&#xD;
					}&#xD;
					memberIndex = memberIndex + 1 ;&#xD;
				}&#xD;
				interfaceIndex = interfaceIndex + 1 ;&#xD;
			}&#xD;
		}&#xD;
		return matches ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_tPbOgBFHEeKT3tsL4v_Daw" name="getLinkKind" specification="_ZTN-wBFHEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_xJl-ABFHEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_x5nFsBFHEeKT3tsL4v_Daw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ypK6YBFHEeKT3tsL4v_Daw" name="result" type="_RgFd0BFAEeKT3tsL4v_Daw" direction="return"/>
          <language>Java</language>
          <body>		// If the given interaction point belongs to the given object, and if the given interaction point is used as an end of the link, &#xD;
		// then the links targets the environment of the object (enumeration literal ToEnvironment) if all the feature values of the link &#xD;
		// (but one for the interaction point) refer to values which are not themselves values for features of the interaction point. &#xD;
		// If all the feature values of the link refer to values which are themselves values for features of the interaction point, &#xD;
		// the link targets the internals of the object (enumeration literal ToInternal). Otherwise, the link has no particular meaning &#xD;
		// in the context defined by the object and the interaction point (enumeration literal None).&#xD;
		if (! link.hasValueForAFeature(interactionPoint)) {&#xD;
			return CS_LinkKind.None ;&#xD;
		}&#xD;
		CS_LinkKind kind = CS_LinkKind.ToInternal ;&#xD;
		FeatureValueList featureValues = link.getFeatureValues() ;&#xD;
		Integer i = 1 ;&#xD;
		while (i &lt;= featureValues.size() &amp;&amp; kind != CS_LinkKind.None) {&#xD;
			FeatureValue value = featureValues.getValue(i-1) ;&#xD;
			if (value.values.isEmpty()) {&#xD;
				kind = CS_LinkKind.None ;&#xD;
			}&#xD;
			else {&#xD;
				Value v = value.values.getValue(0) ;&#xD;
				boolean vIsAValueForAFeatureOfContext = false ;&#xD;
				if (v.equals(interactionPoint)) {&#xD;
					vIsAValueForAFeatureOfContext = true ;&#xD;
				}&#xD;
				else if (v instanceof CS_InteractionPoint) {&#xD;
					v = ((CS_InteractionPoint)v).owner ;&#xD;
					vIsAValueForAFeatureOfContext = this.hasValueForAFeature(v) ;&#xD;
				}&#xD;
				else {&#xD;
					vIsAValueForAFeatureOfContext = this.hasValueForAFeature(v) ;&#xD;
				}&#xD;
				if (!vIsAValueForAFeatureOfContext) {&#xD;
					kind = CS_LinkKind.ToEnvironment ;&#xD;
				}&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return kind ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_ex90gBFJEeKT3tsL4v_Daw" name="getLinks" specification="_LTsd8BFJEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mk6zcBFJEeKT3tsL4v_Daw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_n6AXEBFJEeKT3tsL4v_Daw" name="result" type="_wUyA5N2JEeGnO-TF_1T_iQ" direction="return">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_re294BFJEeKT3tsL4v_Daw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rfAu4BFJEeKT3tsL4v_Daw" value="*"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Get all links (available at the locus of this object) where the given interaction point is used as a feature value&#xD;
		// (i.e. the interaction is an end such links)&#xD;
		ExtensionalValueList extensionalValues = this.locus.extensionalValues ;&#xD;
		Integer i = 1 ;&#xD;
		CS_LinkList connectorInstances = new CS_LinkList() ;&#xD;
		while (i &lt;= extensionalValues.size()) {&#xD;
			ExtensionalValue value = extensionalValues.getValue(i-1) ;&#xD;
			if (value instanceof CS_Link) {&#xD;
				CS_Link link = (CS_Link)value ;&#xD;
				if (this.getLinkKind(link, interactionPoint) != CS_LinkKind.None) {&#xD;
					connectorInstances.addValue(link) ;&#xD;
				}&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return connectorInstances ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KCL9UBFKEeKT3tsL4v_Daw" name="hasValueForAFeature" specification="_8Nv9EBFJEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OXg-0BFKEeKT3tsL4v_Daw" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_PLgnkBFKEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Returns true if the given value object is used as a value for a feature value of this object&#xD;
		FeatureValueList allFeatureValues = this.getFeatureValues() ;&#xD;
		Integer i = 1 ;&#xD;
		boolean isAValue = false ;&#xD;
		while (i &lt;= allFeatureValues.size() &amp;&amp; !isAValue) {&#xD;
			FeatureValue featureValue = allFeatureValues.getValue(i-1);&#xD;
			if (!featureValue.values.isEmpty()) {&#xD;
				ValueList valuesForCurrentFeature = featureValue.values ;&#xD;
				Integer j = 1 ;&#xD;
				while (j &lt;= valuesForCurrentFeature.size() &amp;&amp; !isAValue) {&#xD;
					isAValue = featureValue.values.getValue(j-1).equals(value) ;&#xD;
					j = j + 1 ;&#xD;
				}&#xD;
			}&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
		return isAValue ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wZcMEBFKEeKT3tsL4v_Daw" name="sendOut" specification="_dhRzQBFKEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_zSA7sBFKEeKT3tsL4v_Daw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_0m8uUBFKEeKT3tsL4v_Daw" name="onPort"/>
          <language>Java</language>
          <body>		// Select a CS_InteractionPoint value playing onPort,&#xD;
		// and send the signal instance to this interaction point&#xD;
		FeatureValue featureValue = this.getFeatureValue(onPort) ;&#xD;
		ValueList values = featureValue.values ;&#xD;
		ReferenceList potentialTargets = new ReferenceList() ;&#xD;
		for (int i = 0 ; i &lt; values.size() ; i++) {&#xD;
			potentialTargets.addValue((Reference)values.getValue(i)) ;&#xD;
		}&#xD;
		CS_RequestPropagationStrategy strategy = &#xD;
				(CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
		ReferenceList targets = strategy.select(potentialTargets, new SendSignalActionActivation()) ;&#xD;
		for (int i = 0 ; i &lt; targets.size() ; i++) {&#xD;
			CS_InteractionPoint target = (CS_InteractionPoint)targets.getValue(i) ;&#xD;
			this.sendOut(signalInstance, target) ;&#xD;
		}</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_TnAGABFLEeKT3tsL4v_Daw" name="dispatchOut" specification="_CjED4BFLEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_YkjlIBFLEeKT3tsL4v_Daw" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ZaJJUBFLEeKT3tsL4v_Daw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_aOSjEBFLEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Select a CS_InteractionPoint value playing onPort,&#xD;
		// and dispatches the operation to this interaction point&#xD;
		Execution execution = null ;&#xD;
		FeatureValue featureValue = this.getFeatureValue(onPort) ;&#xD;
		ValueList values = featureValue.values ;&#xD;
		ReferenceList potentialTargets = new ReferenceList() ;&#xD;
		for (int i = 0 ; i &lt; values.size() ; i++) {&#xD;
			potentialTargets.addValue((Reference)values.getValue(i)) ;&#xD;
		}&#xD;
		CS_RequestPropagationStrategy strategy = &#xD;
				(CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
		ReferenceList targets = strategy.select(potentialTargets, new CallOperationActionActivation()) ;&#xD;
		// if targets is empty, no dispatch target has been found,&#xD;
		// and the operation call is lost&#xD;
		if (targets.size() >= 1) {&#xD;
			CS_InteractionPoint target = (CS_InteractionPoint)targets.getValue(0) ;&#xD;
			execution = this.dispatchOut(operation, target) ;&#xD;
		}&#xD;
		return execution ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_53wrMBFLEeKT3tsL4v_Daw" name="dispatchIn" specification="_qLip8BFLEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="__GtcUBFLEeKT3tsL4v_Daw" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="__-NFABFLEeKT3tsL4v_Daw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_AxXnUBFMEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// delegates dispatching to composite referent&#xD;
		// Select a CS_InteractionPoint value playing onPort,&#xD;
		// and dispatches the operation call to this interaction point&#xD;
		FeatureValue featureValue = this.getFeatureValue(onPort) ;&#xD;
		ValueList values = featureValue.values ;&#xD;
		Integer choice = ((ChoiceStrategy) this.locus.factory&#xD;
				.getStrategy(&quot;choice&quot;))&#xD;
				.choose(featureValue.values.size()) - 1;&#xD;
		CS_InteractionPoint interactionPoint = (CS_InteractionPoint)values.getValue(choice) ;&#xD;
		return interactionPoint.dispatch(operation) ;&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_rKZCYBFMEeKT3tsL4v_Daw" name="sendIn" specification="_cXq08BFMEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_yKqnMBFMEeKT3tsL4v_Daw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_z4RYgBFMEeKT3tsL4v_Daw" name="onPort"/>
          <language>Java</language>
          <body>		// Select a Reference value playing onPort,&#xD;
		// and send the signal instance to this interaction point&#xD;
		FeatureValue featureValue = this.getFeatureValue(onPort) ;&#xD;
		ValueList values = featureValue.values ;&#xD;
		ReferenceList potentialTargets = new ReferenceList() ;&#xD;
		for (int i = 0 ; i &lt; values.size() ; i++) {&#xD;
			potentialTargets.addValue((Reference)values.getValue(i)) ;&#xD;
		}&#xD;
		CS_RequestPropagationStrategy strategy = &#xD;
				(CS_RequestPropagationStrategy)this.locus.factory.getStrategy(&quot;requestPropagation&quot;) ;&#xD;
		ReferenceList targets = strategy.select(potentialTargets, new SendSignalActionActivation()) ;&#xD;
		for (int i = 0 ; i &lt; targets.size() ; i++) {&#xD;
			Reference target = targets.getValue(i) ;&#xD;
			target.send(signalInstance) ;&#xD;
		}</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaFd2JEeGnO-TF_1T_iQ" name="dispatchIn" visibility="public" method="_wUwzV92JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaFt2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public dispatchIn (in operation : Operation, &#xD;
                                              in interactionPoint : InteractionPoint) : Execution {&#xD;
	// If the interaction is a behavior port, does nothing [for the moment... ?], &#xD;
	// since the only kind of event supported in fUML is SignalEvent&#xD;
	// If this is not a behavior port, select appropriate delegation links &#xD;
	// from interactionPoint, and propagates the operation call through &#xD;
	// these links&#xD;
	Execution execution = null ;&#xD;
	if (interactionPoint.definingPort.isBehavior) {&#xD;
		// Do nothing&#xD;
	}&#xD;
	else {&#xD;
		ReferenceList targets = &#xD;
			this.selectTargetsForDispatching(operation, interactionPoint) ;&#xD;
		// If targets is empty, no delegation target have been found, &#xD;
		// and the operation call will be lost&#xD;
		if (! (targets.size()==0)) {&#xD;
			// Choose one target non-deterministically&#xD;
			Integer index = &#xD;
						((ChoiceStrategy)this.locus.factory.getStrategy(&quot;choice&quot;))&#xD;
						.choose(targets.size()) ;&#xD;
			Reference target = targets.getValue(index - 1) ;&#xD;
			execution = target.dispatch(operation) ;&#xD;
		}&#xD;
	}&#xD;
	return execution ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaF92JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaGN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaGd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaGt2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaG92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaHN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaHd2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaHt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaH92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaIN2JEeGnO-TF_1T_iQ" name="sendIn" visibility="public" method="_wUxZ1d2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaId2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public sendIn (in signalInstance : SignalInstance,&#xD;
                                       in interactionPoint : InteractionPoint) {&#xD;
	// If the interaction is a behavior port, &#xD;
	// creates a SignalInstanceWithPort from the signal instance, &#xD;
	// and sends it as usual using operation send&#xD;
	// If this is not a behavior port, &#xD;
	// select appropriate delegation targets from interactionPoint, &#xD;
	// and propagates the signal to these targets&#xD;
	if (interactionPoint.definingPort.isBehavior) {&#xD;
		SignalInstanceWithPort newSignalInstance = &#xD;
													new SignalInstanceWithPort() ;&#xD;
		SignalInstance copy = (SignalInstance)signalInstance.copy() ;&#xD;
		newSignalInstance.featureValues = copy.featureValues ;&#xD;
		newSignalInstance.type = copy.type ;&#xD;
		newSignalInstance.interactionPoint = interactionPoint ;&#xD;
		this.send(newSignalInstance) ;&#xD;
	}&#xD;
	else {&#xD;
		ReferenceList targets = &#xD;
					this.selectTargetsForSending(signalInstance, &#xD;
																		interactionPoint) ;&#xD;
		// If targets is empty, no delegation target have been found, &#xD;
		// and the signal is lost&#xD;
		Integer i = 1 ;&#xD;
		// Do the following concurrently&#xD;
		while (i &lt;= targets.size()) {&#xD;
			Reference target = targets.getValue(i-1) ;&#xD;
			target.send(signalInstance) ;&#xD;
			i = i + 1 ;&#xD;
		}&#xD;
	}&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaIt2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaI92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaJN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaJd2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaJt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaJ92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaKN2JEeGnO-TF_1T_iQ" name="selectTargetsForSending" visibility="public" method="_wUxZ3N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaKd2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public selectTargetsForSending (in signalInstance : SignalInstance, &#xD;
                                                         in interactionPoint : InteractionPoint) &#xD;
                                                         : Reference[*] {&#xD;
	// From the given signalInstance and interactionPoint, &#xD;
	// retrieves potential connectors through which request can be delegated&#xD;
	// These connectors are delegation connectors attached to &#xD;
	// Port interactionPoint.definingPort, and whose target provide a &#xD;
	// reception for Signal signalInstance.type&#xD;
	ConnectorList connectors = &#xD;
				this.selectConnectorsForSending(signalInstance.type, &#xD;
																			interactionPoint.definingPort) ;&#xD;
&#xD;
	// Select links owned by the context object for which the &#xD;
	// definingConnector is included in the list of matching connectors.&#xD;
	Integer i = 1 ;&#xD;
	ConnectorInstanceList connectorInstances = &#xD;
																	new ConnectorInstanceList() ;&#xD;
	while (i &lt;= connectors.size()) {&#xD;
		Integer j = 1 ;&#xD;
		Connector connector = connectors.getValue(i-1) ;&#xD;
		while (j &lt;= this.ownedConnectorInstances.size()) {&#xD;
			ConnectorInstance connectorInstance = &#xD;
												this.ownedConnectorInstances.getValue(j-1) ;&#xD;
			if (connectorInstance.definingConnector == connector) {&#xD;
				connectorInstances.addValue(connectorInstance) ;&#xD;
			}&#xD;
			j=j+1 ;&#xD;
		}&#xD;
		i = i+1 ;&#xD;
	}&#xD;
&#xD;
	// For each matching link, retrieves the end value opposite &#xD;
	// to interactionPoint.&#xD;
	// If this value is a reference (which means that it is possible to send it &#xD;
	// a signal), it is added in the list of potential targets.&#xD;
	ReferenceList targets = new ReferenceList() ;&#xD;
	i = 1 ;&#xD;
	while (i &lt;= connectorInstances.size()) {&#xD;
		ConnectorInstance link = connectorInstances.getValue(i-1) ;&#xD;
		Association association = link.type ;&#xD;
		Property oppositeEnd = association.memberEnd.getValue(0);&#xD;
		if (oppositeEnd == interactionPoint.definingPort) {&#xD;
	   		oppositeEnd = association.memberEnd.getValue(1);&#xD;
		}&#xD;
		Value value = link.getFeatureValue(oppositeEnd).values.getValue(0) ;&#xD;
		if (value instanceof Reference) {&#xD;
			targets.addValue((Reference)value) ;&#xD;
		}&#xD;
		i = i + 1;&#xD;
	}&#xD;
	&#xD;
	// if targets is empty, no matching targets have been found, &#xD;
	// and the signal instance will be lost&#xD;
	return targets ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_JM34MBFFEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaLd2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaLt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaL92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8AdhQBFEEeKT3tsL4v_Daw" name="connectorKind"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaKt2JEeGnO-TF_1T_iQ" name="signal">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Signal"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaK92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaLN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_As5mYOdwEeGYZqnbU6eCYw" name="toInternal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaMN2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaMd2JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaMt2JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaPt2JEeGnO-TF_1T_iQ" name="selectTargetsForDispatching" visibility="public" method="_wUxZ8N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaP92JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public selectTargetsForDispatching (in operation : Operation, &#xD;
                                                                in interactionPoint : InteractionPoint) &#xD;
                                                                : Reference [*] { &#xD;
	// From the given operation and interactionPoint, retrieves potential &#xD;
	// connectors through which request can be delegated&#xD;
	// These connectors are delegation connectors attached to Port &#xD;
	// interactionPoint.definingPort,&#xD;
	// and whose target provides or realize operation&#xD;
	ConnectorList connectors = &#xD;
			this.selectConnectorsForDispatching(operation, &#xD;
																			interactionPoint.definingPort) ;&#xD;
&#xD;
	// Select links owned by the context object for which the &#xD;
	// definingConnector is included in the list of matching connectors.&#xD;
	Integer i = 1 ;&#xD;
	ConnectorInstanceList connectorInstances = &#xD;
											new ConnectorInstanceList() ;&#xD;
	while (i &lt;= connectors.size()) {&#xD;
		Integer j = 1 ;&#xD;
		Connector connector = connectors.getValue(i-1) ;&#xD;
		while (j &lt;= this.ownedConnectorInstances.size()) {&#xD;
			ConnectorInstance connectorInstance = &#xD;
							this.ownedConnectorInstances.getValue(j-1) ;&#xD;
			if (connectorInstance.definingConnector == connector) {&#xD;
				connectorInstances.addValue(connectorInstance) ;&#xD;
			}&#xD;
			j=j+1 ;&#xD;
		}&#xD;
		i = i+1 ;&#xD;
	}&#xD;
	&#xD;
	// For each matching link, retrieves the end value opposite &#xD;
	// to interactionPoint.&#xD;
	// If this value is a reference (which means that it is possible to dispatch &#xD;
	// operation to it), it is added in the list of potential targets.&#xD;
	ReferenceList targets = new ReferenceList() ;&#xD;
	i = 1 ;&#xD;
	while (i &lt;= connectorInstances.size()) {&#xD;
		ConnectorInstance link = connectorInstances.getValue(i-1) ;&#xD;
		Association association = link.type ;&#xD;
		Property oppositeEnd = association.memberEnd.getValue(0);&#xD;
		if (oppositeEnd == interactionPoint.definingPort) {&#xD;
	   		oppositeEnd = association.memberEnd.getValue(1);&#xD;
		}&#xD;
		Value value = link.getFeatureValue(oppositeEnd).values.getValue(0) ;&#xD;
		if (value instanceof Reference) {&#xD;
			targets.addValue((Reference)value) ;&#xD;
		}&#xD;
		i = i + 1;&#xD;
	}&#xD;
	&#xD;
	// if targets is empty, no matching targets have been found, &#xD;
	// and the operation call will be lost&#xD;
	return targets ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_VooqwBFEEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaQ92JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaRN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaRd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_KpomkBFEEeKT3tsL4v_Daw" name="connectorKind"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaQN2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaQd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaQt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mu46UOdxEeGYZqnbU6eCYw" name="toInternal">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaRt2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaR92JEeGnO-TF_1T_iQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaSN2JEeGnO-TF_1T_iQ" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaVN2JEeGnO-TF_1T_iQ" name="sendOut" visibility="public" method="_wUxZ-t2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaVd2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public sendOut(in signalInstance : SignalInstance, in onPort : Port) {&#xD;
	// TODO:&#xD;
	// Propagate the signal instance through interaction points &#xD;
	// corresponding to onPorts, following appropriate links.&#xD;
	// This will result in calling send(signalInstance) on &#xD;
	// oppositeEnd found from the links&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaVt2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaV92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaWN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaWd2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaWt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaW92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUxaXN2JEeGnO-TF_1T_iQ" name="dispatchOut" visibility="public" method="_wUxaAd2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUxaXd2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public dispatchOut (in operation : Operation, in onPort : Port) : Execution { &#xD;
	// TODO:&#xD;
	// Propagate the operation call through interaction points corresponding &#xD;
	// to onPorts, following appropriate links,&#xD;
	// This will result in calling dispatch(operation) on oppositeEnd found &#xD;
	// from the links&#xD;
&#xD;
	return null ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaXt2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaX92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaYN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaYd2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaYt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaY92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUxaZN2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUxaZd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUxaZt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_QimP8OVQEeGVLZOJyKihvQ" name="getFeatureValue" method="_mFIkUOVQEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ZfxmUOVQEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_fV7hYOVQEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-FeatureValue"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_b4W7YOVdEeGVLZOJyKihvQ" name="setFeatureValue" method="_9gg9wOVdEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_l3jvcOVdEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_pvSO8OVdEeGVLZOJyKihvQ" name="values">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_XiqmIOVgEeGVLZOJyKihvQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_XiuQgOVgEeGVLZOJyKihvQ" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_uNffoOVdEeGVLZOJyKihvQ" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_9z3cYOdyEeGYZqnbU6eCYw" name="contains" method="_NNQoQOdzEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Fl_78OdzEeGYZqnbU6eCYw" name="object">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_I525YOdzEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_u98UgOdzEeGYZqnbU6eCYw" name="directlyContains" method="_EA5J4Od0EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_1TrHgOdzEeGYZqnbU6eCYw" name="object">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Object"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_4cTFUOdzEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_uyYIQOd0EeGYZqnbU6eCYw" name="getDirectContainers" method="_-R5xUOd0EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2SLhsOd0EeGYZqnbU6eCYw" name="result" type="_wUwzPd2JEeGnO-TF_1T_iQ" direction="return">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_ojcHsOeeEeGYZqnbU6eCYw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ojhAMOeeEeGYZqnbU6eCYw" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_daYsQOd1EeGYZqnbU6eCYw" name="isOperationProvided" method="_HdeTkOd2EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_uV5LIOd1EeGYZqnbU6eCYw" name="reference">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_63S2MOd1EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="__H694Od1EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_o8fyoOd3EeGYZqnbU6eCYw" name="isOperationRequired" method="_FD5iMOd4EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_zQrYMOd3EeGYZqnbU6eCYw" name="reference">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2bFesOd3EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_6V35QOd3EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_ZTN-wBFHEeKT3tsL4v_Daw" name="getLinkKind" method="_tPbOgBFHEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_e8R5ABFHEeKT3tsL4v_Daw" name="link" type="_wUyA5N2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hSjM0BFHEeKT3tsL4v_Daw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_kPzBEBFHEeKT3tsL4v_Daw" name="result" type="_RgFd0BFAEeKT3tsL4v_Daw" direction="return"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_LTsd8BFJEeKT3tsL4v_Daw" name="getLinks" method="_ex90gBFJEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Pt5YYBFJEeKT3tsL4v_Daw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_So2toBFJEeKT3tsL4v_Daw" name="result" type="_wUyA5N2JEeGnO-TF_1T_iQ" direction="return">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_TpY9kBFJEeKT3tsL4v_Daw"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_TpfEMBFJEeKT3tsL4v_Daw" value="*"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_8Nv9EBFJEeKT3tsL4v_Daw" name="hasValueForAFeature" method="_KCL9UBFKEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_CLdRoBFKEeKT3tsL4v_Daw" name="value">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ELcMYBFKEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_dhRzQBFKEeKT3tsL4v_Daw" name="sendOut" method="_wZcMEBFKEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_jjnJIBFKEeKT3tsL4v_Daw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_pa_zQBFKEeKT3tsL4v_Daw" name="onPort"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_CjED4BFLEeKT3tsL4v_Daw" name="dispatchOut" method="_TnAGABFLEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ITFhwBFLEeKT3tsL4v_Daw" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_L179cBFLEeKT3tsL4v_Daw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_PY01YBFLEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_qLip8BFLEeKT3tsL4v_Daw" name="dispatchIn" method="_53wrMBFLEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_vQX1wBFLEeKT3tsL4v_Daw" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_xnuusBFLEeKT3tsL4v_Daw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_0v1IEBFLEeKT3tsL4v_Daw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_cXq08BFMEeKT3tsL4v_Daw" name="sendIn" method="_rKZCYBFMEeKT3tsL4v_Daw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_j2tZYBFMEeKT3tsL4v_Daw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_nUOpIBFMEeKT3tsL4v_Daw" name="onPort"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwMMt2JEeGnO-TF_1T_iQ" name="CS_Reference">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwMM92JEeGnO-TF_1T_iQ">
          <body>This class extends fuml Reference with specific operations for managing request propagation through ports, from the environment to the internals of the referent object, or from the referent objet to its environment. (NOTE: Addresses requirement R1 &quot;The target value of an invocation action may also be a port. In this case, the invocation request is sent to the object owning this port as identified by the port identity, and is, upon arrival, handled as described in &quot;Port&quot; clause&quot;, and R2 &quot;Invocation actions may also be sent to a target via a given port, either on the sending object or on another object.&quot;)</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_VWe1kOH2EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Classes.Interfaces.Operation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CompositeStructures.Ports.Port;&#xD;
import fUML.Semantics.Classes.Kernel.Reference;&#xD;
import fUML.Semantics.CommonBehaviors.BasicBehaviors.Execution;&#xD;
import fUML.Semantics.CommonBehaviors.Communications.SignalInstance;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwyw92JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference"/>
        </generalization>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_wUwyxN2JEeGnO-TF_1T_iQ" name="compositeReferent" type="_wUwzPd2JEeGnO-TF_1T_iQ" isUnique="false" association="_wUyA4N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwyxd2JEeGnO-TF_1T_iQ">
            <body>The composite object referenced by this ReferenceToCompositeStructure. This property subsets Reference::referent.</body>
          </ownedComment>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwyxt2JEeGnO-TF_1T_iQ" value="1"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwyx92JEeGnO-TF_1T_iQ" value="1"/>
          <subsettedProperty xmi:type="uml:Property" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Reference-referent"/>
        </ownedAttribute>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwyyN2JEeGnO-TF_1T_iQ" name="dispatchIn" specification="_wUwy6t2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwyyd2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwyyt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwyy92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwyzN2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwyzd2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwyzt2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwyz92JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy0N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy0d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		//Delegates dispatching to composite referent&#xD;
		return this.compositeReferent.dispatchIn(operation, interactionPoint) ;&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwy0t2JEeGnO-TF_1T_iQ" name="sendIn" specification="_wUwy9d2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy092JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy1N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy1d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy1t2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy192JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy2N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// delegates sending to composite referent&#xD;
		this.compositeReferent.sendIn(signalInstance, interactionPoint) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwy2d2JEeGnO-TF_1T_iQ" name="sendOut" specification="_wUwy_d2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy2t2JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy292JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy3N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy3d2JEeGnO-TF_1T_iQ" name="onPort">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy3t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy392JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// delegates sending to composite referent&#xD;
		this.compositeReferent.sendOut(signalInstance, onPort) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwy4N2JEeGnO-TF_1T_iQ" name="dispatchOut" specification="_wUwzBd2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy4d2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy4t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy492JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy5N2JEeGnO-TF_1T_iQ" name="onPort">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy5d2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy5t2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy592JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy6N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy6d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// delegates dispatching to composite referent&#xD;
		return this.compositeReferent.dispatchOut(operation, onPort) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_YUUl0Od_EeGYZqnbU6eCYw" name="dispatchIn" specification="_-q5UkOd-EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_g0TC0Od_EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_irJ2wOd_EeGYZqnbU6eCYw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_kW9RQOd_EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// delegates dispatching to composite referent&#xD;
		return this.compositeReferent.dispatchIn(operation, onPort) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_f8HBIOeAEeGYZqnbU6eCYw" name="sendIn" specification="_LuBXMOeAEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_mQBPMOeAEeGYZqnbU6eCYw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_n5cEEOeAEeGYZqnbU6eCYw" name="onPort"/>
          <language>Java</language>
          <body>		// delegates sending to composite referent&#xD;
		this.compositeReferent.sendIn(signalInstance, onPort) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_aNfcAOeBEeGYZqnbU6eCYw" name="dispatchOut" specification="_EvUDMOeBEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hLz5AOeBEeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_jDw5IOeBEeGYZqnbU6eCYw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_k7fPwOeBEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Delegates dispatching (through the interaction point, to the environment) &#xD;
		// to compositeReferent&#xD;
		return this.compositeReferent.dispatchOut(operation, interactionPoint) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_W2oYcOeCEeGYZqnbU6eCYw" name="sendOut" specification="_HdRBwOeCEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_hHm5AOeCEeGYZqnbU6eCYw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_i2fcsOeCEeGYZqnbU6eCYw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <language>Java</language>
          <body>		// Delegates sending (through the interaction point, to the environment) &#xD;
		// to compositeReferent&#xD;
		this.compositeReferent.sendOut(signalInstance, interactionPoint) ;</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_RkFU4La1EeSLjqGQRuQPyA" name="copy" specification="_9LFbcLa0EeSLjqGQRuQPyA">
          <language>JAVA</language>
          <body>// Create a new reference with the same referent and composite referent as this reference.&#xD;
CS_Reference newValue = new CS_Reference();&#xD;
newValue.referent = this.referent;&#xD;
newValue.compositeReferent = this.compositeReferent;&#xD;
return newValue;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_9LFbcLa0EeSLjqGQRuQPyA" name="copy" method="_RkFU4La1EeSLjqGQRuQPyA">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_DnfeMLa1EeSLjqGQRuQPyA" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwy6t2JEeGnO-TF_1T_iQ" name="dispatchIn" visibility="public" method="_wUwyyN2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwy692JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public dispatchIn (in operation : Operation, &#xD;
                                              in interactionPoint : InteractionPoint) : Execution {&#xD;
	//Delegates dispatching to composite referent&#xD;
	return this.compositeReferent.dispatchIn(operation, &#xD;
                                                                                            interactionPoint) ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy7N2JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy7d2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy7t2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy792JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy8N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy8d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy8t2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy892JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy9N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwy9d2JEeGnO-TF_1T_iQ" name="sendIn" visibility="public" method="_wUwy0t2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwy9t2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public sendIn (in signalInstance : SignalInstance, &#xD;
                                       in interactionPoint : InteractionPoint) {&#xD;
	// delegates sending to composite referent&#xD;
	this.compositeReferent.sendIn(signalInstance, interactionPoint) ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy992JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy-N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy-d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy-t2JEeGnO-TF_1T_iQ" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwy-92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwy_N2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwy_d2JEeGnO-TF_1T_iQ" name="sendOut" visibility="public" method="_wUwy2d2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwy_t2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public sendOut(in signalInstance : SignalInstance, in onPort : Port) {&#xD;
	// Delegates sending (through the port, to the environment) &#xD;
	// to compositeReferent&#xD;
	this.compositeReferent.sendOut(signalInstance, onPort) ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwy_92JEeGnO-TF_1T_iQ" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzAN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzAd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzAt2JEeGnO-TF_1T_iQ" name="onPort">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzA92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzBN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwzBd2JEeGnO-TF_1T_iQ" name="dispatchOut" visibility="public" method="_wUwy4N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwzBt2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public dispatchOut (in operation : Operation, in onPort : Port) : Execution { &#xD;
	// Delegates dispatching (through the port, to the environment) &#xD;
	// to compositeReferent&#xD;
	return this.compositeReferent.dispatchOut(operation, onPort) ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzB92JEeGnO-TF_1T_iQ" name="operation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzCN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzCd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzCt2JEeGnO-TF_1T_iQ" name="onPort">
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzC92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzDN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwzDd2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwzDt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwzD92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_-q5UkOd-EeGYZqnbU6eCYw" name="dispatchIn" method="_YUUl0Od_EeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_EH_PYOd_EeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_I_5ZgOd_EeGYZqnbU6eCYw" name="onPort"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_POozsOd_EeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_LuBXMOeAEeGYZqnbU6eCYw" name="sendIn" method="_f8HBIOeAEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_RDSywOeAEeGYZqnbU6eCYw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_U3EmYOeAEeGYZqnbU6eCYw" name="onPort"/>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_EvUDMOeBEeGYZqnbU6eCYw" name="dispatchOut" method="_aNfcAOeBEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_KUcfsOeBEeGYZqnbU6eCYw" name="operation"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_PAQukOeBEeGYZqnbU6eCYw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_SygRIOeBEeGYZqnbU6eCYw" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-BasicBehaviors-Execution"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_HdRBwOeCEeGYZqnbU6eCYw" name="sendOut" method="_W2oYcOeCEeGYZqnbU6eCYw">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OD4JYOeCEeGYZqnbU6eCYw" name="signalInstance">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-CommonBehaviors-Communications-SignalInstance"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_UCdAoOeCEeGYZqnbU6eCYw" name="interactionPoint" type="_wUvk8d2JEeGnO-TF_1T_iQ"/>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_RgFd0BFAEeKT3tsL4v_Daw" name="CS_LinkKind">
        <ownedComment xmi:type="uml:Comment" xmi:id="_n_m-4BFAEeKT3tsL4v_Daw">
          <body>This enumeration enables to characterize a CS_Link with respect to given CS_Object and CS_InteractionPoint. If the given interaction point belongs to the given object, and if the given interaction point is used as an end of the link, then the links targets the environment of the object (enumeration literal ToEnvironment) if all the feature values of the link (but one for the interaction point) refer to values which are not themselves values for features of the interaction point. If all the feature values of the link refer to values which are themselves values for features of the interaction point, the link targets the internals of the object (enumeration literal ToInternal). Otherwise, the link has no particular meaning in the context defined by the object and the interaction point (enumeration literal None).</body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_UMcWYBFAEeKT3tsL4v_Daw" name="ToEnvironment"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_VYG4QBFAEeKT3tsL4v_Daw" name="ToInternal"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_XO-TQBFAEeKT3tsL4v_Daw" name="None"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_wUwL2N2JEeGnO-TF_1T_iQ" name="CS_DispatchOperationOfInterfaceStrategy">
        <ownedComment xmi:type="uml:Comment" xmi:id="_wUwL2d2JEeGnO-TF_1T_iQ">
          <body>Extends fUML RedefinitionBasedDispatchStrategy to account for the fact that the invoked operation may belong to an interface, and not to one of the classifiers of the target object (NOTE: Not mandatory to have it defined as an extension of RedefinitionBasedDispatchStrategy. Could be defined as direct specialization of DispatchStrategy)</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_WaH5UOH1EeG4NZyomhkW-A">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.Classes.Interfaces.Operation;&#xD;
import CompositeStructuresSyntaxAndSemantics.Syntax.CommonBehaviors.Communications.Interface;&#xD;
import fUML.Semantics.Classes.Kernel.RedefinitionBasedDispatchStrategy;&#xD;
import fUML.Syntax.Classes.Kernel.Parameter;&#xD;
import fUML.Syntax.Classes.Kernel.ParameterList;&#xD;
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_wUwL3d2JEeGnO-TF_1T_iQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-RedefinitionBasedDispatchStrategy"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_wUwL6N2JEeGnO-TF_1T_iQ" name="operationsMatch" specification="_wUwL_d2JEeGnO-TF_1T_iQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwL6d2JEeGnO-TF_1T_iQ" name="ownedOperation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwL6t2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwL692JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwL7N2JEeGnO-TF_1T_iQ" name="baseOperation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwL7d2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwL7t2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwL792JEeGnO-TF_1T_iQ" name="result">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwL8N2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwL8d2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// Override operationsMatch, in the case where baseOperation belongs &#xD;
		// to an Interface.&#xD;
		// In this case, ownedOperation matches baseOperation if it has the same name and signature&#xD;
		// Otherwise, behaves like fUML RedefinitionBasedDispatchStrategy&#xD;
		boolean matches = true ;&#xD;
		if (baseOperation.namespace instanceof Interface) {&#xD;
			matches = (baseOperation.name == ownedOperation.name) ;&#xD;
			matches = matches &amp;&amp; (baseOperation.ownedParameter.size() == ownedOperation.ownedParameter.size()) ;&#xD;
			ParameterList ownedOperationParameters = ownedOperation.ownedParameter ;&#xD;
			ParameterList baseOperationParameters = baseOperation.ownedParameter ;&#xD;
			for (int i = 0 ; matches == true &amp;&amp; i &lt; ownedOperationParameters.size() ; i++) {&#xD;
				Parameter ownedParameter = ownedOperationParameters.getValue(i) ;&#xD;
				Parameter baseParameter = baseOperationParameters.getValue(i) ;&#xD;
				matches = (ownedParameter.type == baseParameter.type) ;&#xD;
				matches = matches &amp;&amp; (ownedParameter.multiplicityElement.lower == ownedParameter.multiplicityElement.lower) ;&#xD;
				matches = matches &amp;&amp; (ownedParameter.multiplicityElement.upper == ownedParameter.multiplicityElement.upper) ;&#xD;
				matches = matches &amp;&amp; (ownedParameter.direction == ownedParameter.direction) ;&#xD;
			}&#xD;
		}&#xD;
		else {&#xD;
			matches = super.operationsMatch(ownedOperation, baseOperation) ;&#xD;
		}&#xD;
&#xD;
		return matches ;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_wUwL_d2JEeGnO-TF_1T_iQ" name="operationsMatch" visibility="public" method="_wUwL6N2JEeGnO-TF_1T_iQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_wUwL_t2JEeGnO-TF_1T_iQ">
            <body>&lt;&lt;TextualRepresentation>>public operationsMatch (in ownedOperation : Operation , &#xD;
											in baseOperation : Operation ) &#xD;
											: Boolean {&#xD;
	// Override operationsMatch, in the case where baseOperation belongs &#xD;
	// to an Interface&#xD;
	return false ;&#xD;
}</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwL_92JEeGnO-TF_1T_iQ" name="ownedOperation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwMAN2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwMAd2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwMAt2JEeGnO-TF_1T_iQ" name="baseOperation">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#Operation"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwMA92JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwMBN2JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_wUwMBd2JEeGnO-TF_1T_iQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_wUwMBt2JEeGnO-TF_1T_iQ" value="1"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_wUwMB92JEeGnO-TF_1T_iQ" value="1"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_HC0DIOVNEeGVLZOJyKihvQ" name="CS_StructuralFeatureOfInterfaceAccessStrategy" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_VWDtAOVSEeGVLZOJyKihvQ">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValue;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Semantics.Loci.LociL1.SemanticStrategy;&#xD;
import fUML.Syntax.Classes.Kernel.StructuralFeature;</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_fvGBYOeXEeGYZqnbU6eCYw">
          <body>This abstract strategy class enables to deal with realization of structural features by a behaviored classifier, in the case where these structural features belong to an interface realized by this classifier. Concrete realization of this abstract class shall specify behaviors for abstract operations read and write.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_DFVrgOVOEeGVLZOJyKihvQ">
          <general xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Loci-LociL1-SemanticStrategy"/>
        </generalization>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_V7pqMOVOEeGVLZOJyKihvQ" name="getName" specification="_du9q8OVNEeGVLZOJyKihvQ">
          <language>Java</language>
          <body>		// StructuralFeatureAccessStrategy are always named &quot;structuralFeature&quot;&#xD;
		return &quot;structuralFeature&quot;;</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_du9q8OVNEeGVLZOJyKihvQ" name="getName" method="_V7pqMOVOEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_63F3sOVNEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_e8Yq4OVOEeGVLZOJyKihvQ" name="read" isAbstract="true">
          <ownedComment xmi:type="uml:Comment" xmi:id="_5uKn8OeWEeGYZqnbU6eCYw">
            <body>// This abstract operation is intented to return the feature value for the given structural feature, &#xD;
// in the context of the given object, in the case where the feature belongs to an Interface</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_l5XEEOVOEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_u-DXsOVOEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_0j60AOVOEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-FeatureValue"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_r0tN4OVeEeGVLZOJyKihvQ" name="write" isAbstract="true">
          <ownedComment xmi:type="uml:Comment" xmi:id="_TASMcOeXEeGYZqnbU6eCYw">
            <body>// This abstract operation is intented to capture the way the given structural feature is set,&#xD;
// in the context of the given object, in the case where the feature belongs to an Interface</body>
          </ownedComment>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_z5-E0OVeEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_5No94OVeEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_-3-qgOVeEeGVLZOJyKihvQ" name="values">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_SozwsOVfEeGVLZOJyKihvQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_So4CIOVfEeGVLZOJyKihvQ" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_CRxQ0OVfEeGVLZOJyKihvQ" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_-BGgIOVOEeGVLZOJyKihvQ" name="CS_NameBased_StructuralFeatureOfInterfaceAccessStrategy">
        <ownedComment xmi:type="uml:Comment" xmi:id="_O7JfEOVSEeGVLZOJyKihvQ">
          <body>// Imports&#xD;
import CompositeStructuresSyntaxAndSemantics.Semantics.CompositeStructures.StructuredClasses.CS_Object;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValue;&#xD;
import fUML.Semantics.Classes.Kernel.FeatureValueList;&#xD;
import fUML.Semantics.Classes.Kernel.ValueList;&#xD;
import fUML.Syntax.Classes.Kernel.StructuralFeature;</body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_70Mq4OeXEeGYZqnbU6eCYw">
          <body>This class provides a realization of semantic strategy CS_StructuralFeatureOfInterfaceAccessStrategy. This realization makes the hypothesis that, for a given behaviored classifier to actually realize an interface, it shall have structural features which exactly match structural features of the realized interface. Realizing features shall have same name, type and multiplicity as structural features of the interface.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_PKNWIOVPEeGVLZOJyKihvQ" general="_HC0DIOVNEeGVLZOJyKihvQ"/>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_oFfvAOVPEeGVLZOJyKihvQ" name="read" specification="_Qc5tEOVPEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_0KCe8OVPEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_1XkpEOVPEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_2vWUUOVPEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-FeatureValue"/>
          </ownedParameter>
          <language>Java</language>
          <body>		// returns the a copy of the first feature value of cs_Object where the name of the corresponding feature&#xD;
		// matches the name of the feature given as a parameter&#xD;
		// Otherwise, returns an empty feature value&#xD;
		FeatureValueList featureValues = cs_Object.featureValues ;&#xD;
		FeatureValue matchingFeatureValue = null ;&#xD;
		for (int i = 0 ; i &lt; featureValues.size() &amp;&amp; matchingFeatureValue == null ; i++) {&#xD;
			FeatureValue featureValue = featureValues.getValue(i) ; &#xD;
			if (featureValue.feature.name.equals(feature.name)) {&#xD;
				matchingFeatureValue = featureValue ;&#xD;
			}&#xD;
		}&#xD;
		if (matchingFeatureValue != null) {&#xD;
			matchingFeatureValue = matchingFeatureValue.copy() ;&#xD;
			matchingFeatureValue.feature = feature ;&#xD;
		}&#xD;
		else {&#xD;
			matchingFeatureValue = new FeatureValue() ;&#xD;
			matchingFeatureValue.feature = feature ;&#xD;
			matchingFeatureValue.values = new ValueList() ;&#xD;
			matchingFeatureValue.position = 0 ;&#xD;
		}&#xD;
		&#xD;
		return matchingFeatureValue ;&#xD;
</body>
        </ownedBehavior>
        <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_nOZUoOVfEeGVLZOJyKihvQ" name="write" specification="_OssgcOVfEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_qgQG8OVfEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_sCcScOVfEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_tRccMOVfEeGVLZOJyKihvQ" name="values">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_8pJmAOVfEeGVLZOJyKihvQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_8pSv8OVfEeGVLZOJyKihvQ" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_vIYvsOVfEeGVLZOJyKihvQ" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <language>Java</language>
          <body>	// Retrieves the first feature value of cs_Object where the name of the corresponding feature&#xD;
	// matches the name of the feature given as a parameter&#xD;
	// Then updates the values for this feature value&#xD;
	FeatureValueList featureValues = cs_Object.featureValues ;&#xD;
	FeatureValue matchingFeatureValue = null ;&#xD;
	for (int i = 0 ; i &lt; featureValues.size() &amp;&amp; matchingFeatureValue == null ; i++) {&#xD;
		FeatureValue featureValue = featureValues.getValue(i) ; &#xD;
		if (featureValue.feature.name.equals(feature.name)) {&#xD;
			matchingFeatureValue = featureValue ;&#xD;
		}&#xD;
	}&#xD;
	if (matchingFeatureValue != null) {&#xD;
		cs_Object.setFeatureValue(matchingFeatureValue.feature, values, position) ;&#xD;
	}&#xD;
</body>
        </ownedBehavior>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Qc5tEOVPEeGVLZOJyKihvQ" name="read" method="_oFfvAOVPEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_VDQ0MOVPEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Yhf1oOVPEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_dC7ZcOVPEeGVLZOJyKihvQ" name="result" direction="return">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-FeatureValue"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_OssgcOVfEeGVLZOJyKihvQ" name="write" method="_nOZUoOVfEeGVLZOJyKihvQ">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OssgceVfEeGVLZOJyKihvQ" name="cs_Object" type="_wUwzPd2JEeGnO-TF_1T_iQ"/>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OssgcuVfEeGVLZOJyKihvQ" name="feature">
            <type xmi:type="uml:Class" href="../Syntax/UML.uml#StructuralFeature"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Ossgc-VfEeGVLZOJyKihvQ" name="values">
            <type xmi:type="uml:Class" href="fUML_Semantics.uml#Semantics-Classes-Kernel-Value"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_U82P4OVfEeGVLZOJyKihvQ"/>
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_U856QOVfEeGVLZOJyKihvQ" value="*"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_OssgdOVfEeGVLZOJyKihvQ" name="position">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
  </packagedElement>
</uml:Model>
